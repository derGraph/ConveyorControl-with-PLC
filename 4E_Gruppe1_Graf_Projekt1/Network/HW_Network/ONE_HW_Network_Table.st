//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
#define OBJECTS_CONFIG

//Define part of class SdiasBase
//Address to access the Dataobject list via SPI SDO Read
#define SDIAS_SPI_DATA_OBJECT_LIST_PAGE_ADDRESS 16#FFFF
#define SDIAS_SPI_DATA_OBJECT_LIST_PAGE_OFFSET 16#00
#define SDIAS_SPI_DATA_OBJECT_LIST_IDENTIFIER 16#12345678

//Defines the number of optional list elements in the SPI List

#define SDIAS_SPI_NUMBER_OF_OPTIONAL_ELEMENTS 7   

//#pragma message("EisMic 27.06.2014 14:44 \ Noch schauen ob ichs besser machen kann")
#define SDIAS_SPI_HEADER_BEFORE_OPTIONAL_ELEMENTS 16#18
#define SDIAS_SPI_HARDWARE_VERSION_OFFSET 16#C
#define SDIAS_SPI_VENDOR_ID_OFFSET 16#0

//SPI List IDs
#define SDIAS_SPI_IDENTIFICATION_LIST_ID 1
#define SDIAS_SPI_FLASH_CONFIGURATION_ID 2
#define SDIAS_SPI_VENDOR_NAME_ID 3
#define SDIAS_SPI_DEVICE_NAME_ID 4
#define SDIAS_SPI_SERIAL_NUMBER_ID 5
#define SDIAS_SPI_ORDERING_NUMBER_ID 6
#define SDIAS_SPI_DOCUMENTATION_PDF_ID 7
#define SDIAS_SPI_CALIB_DATA_ID 10
#define SDIAS_SPI_PDO_INFORMATION_ID 128
#include "..\..\Class\SdiasManager\SdiasManager.h"
#include <.\lsl_st_hardwaretree.h>
#include "..\..\Class\SdiasBase\SdiasBase.h"
#include "..\..\Class\HwControl\HwControl.h"
//Define part of class _BusInterfaceSdiasDriveMng
#define BUSIF_SDIASDRIVEMNG_OFFSET_TYPELABEL        0x0000
#define BUSIF_SDIASDRIVEMNG_PARALIST_INDEX_SET      0x2210
#define BUSIF_SDIASDRIVEMNG_PARALIST_INDEX_INFO     0x2211
#define BUSIF_SDIASDRIVEMNG_PARALIST_INDEX_SETNR    174


#define BUSIF_SDIASDRIVEMNG_MAX_SERVICEBOX          4
#define BUSIF_SDIASDRIVEMNG_SDO_RESPONSE_TIMEOUT    SDIAS_SDO_TIMEOUT * 2
#define BUSIF_SDIASDRIVEMNG_SDO_TYPELABEL_TIMEOUT   10000  //10 sec timeout to read typelabel

#define BUSIF_SDIASDRIVEMNG_SDO_SERVICE_APP_MDD100        0x4150
#define BUSIF_SDIASDRIVEMNG_SDO_SERVICE_APP_LASAL         0x4C41
#define BUSIF_SDIASDRIVEMNG_SDO_SERVICE_APP_CANOPEN       0x4453
#define BUSIF_SDIASDRIVEMNG_SDO_SERVICE_APP_CANOPEN_LASAL 0x444C



#define BUSIF_SDIASDRIVEMNG_FULL_PARADATA_SIZE   12
#define BUSIF_SDIASDRIVEMNG_CANOPEN_FOOTER_SIZE   4
#define BUSIF_SDIASDRIVEMNG_LASAL_PARADATA_SIZE   4
#include "..\..\Class\_DriveMngBase\DriveMngBase.h"
//Define part of class _DriveAxisBase
// Device ID for the Drive Cards 
#define DRIVEMNG_AXISDEVICEID_SDD_OFFSET         0
#define DRIVEMNG_AXISEVICEID_MDD_OFFSET   16#10000
#define DRIVEMNG_AXISEVICEID_SDIAS_OFFSET 16#20000
#include "..\..\Class\_DriveMngBase\SDDDefinitions.h"
//Define part of class _DriveMngBase
#ifndef _T_DRIVEMNGBASE_H
#define _T_DRIVEMNGBASE_H

// DiasDrive Constants
#DEFINE SDDMAXENTRIES   32        // maximale Anzahl an Achsen
#DEFINE SDDMAXPLACE     3         // maximale Anzahl an Achsen pro Steckplatz 

// Device ID for the Drive IF Cards 
#define DRIVEMNG_BUSDEVICEID_VAC011    11
#define DRIVEMNG_BUSDEVICEID_VAC012  1061
#define DRIVEMNG_BUSDEVICEID_VAC013  1075

#define DRIVEMNG_BUSDEVICEID_MDD     1071

// Device ID for the Drive Cards 
#define DRIVEMNG_DRVDEVICEID_SDD_OFFSET 0

#define DRIVEMNG_DRVDEVICEID_SDD305 DRIVEMNG_DRVDEVICEID_SDD_OFFSET + 16
#define DRIVEMNG_DRVDEVICEID_SDD310 DRIVEMNG_DRVDEVICEID_SDD_OFFSET +  3
#define DRIVEMNG_DRVDEVICEID_SDD315 DRIVEMNG_DRVDEVICEID_SDD_OFFSET +  1
#define DRIVEMNG_DRVDEVICEID_SDD335 DRIVEMNG_DRVDEVICEID_SDD_OFFSET + 12

#define DRIVEMNG_DRVDEVICEID_SDD205 DRIVEMNG_DRVDEVICEID_SDD_OFFSET + 22 
#define DRIVEMNG_DRVDEVICEID_SDD210 DRIVEMNG_DRVDEVICEID_SDD_OFFSET +  9
#define DRIVEMNG_DRVDEVICEID_SDD215 DRIVEMNG_DRVDEVICEID_SDD_OFFSET +  5

#define DRIVEMNG_DRVDEVICEID_SDD105 DRIVEMNG_DRVDEVICEID_SDD_OFFSET + 21
#define DRIVEMNG_DRVDEVICEID_SDD115 DRIVEMNG_DRVDEVICEID_SDD_OFFSET + 10
#define DRIVEMNG_DRVDEVICEID_SDD120 DRIVEMNG_DRVDEVICEID_SDD_OFFSET +  7

#define DRIVEMNG_DRVDEVICEID_MDD_OFFSET 16#10000

#define DRIVEMNG_DRVDEVICEID_MDD111 DRIVEMNG_DRVDEVICEID_MDD_OFFSET + 1
#define DRIVEMNG_DRVDEVICEID_MDD121 DRIVEMNG_DRVDEVICEID_MDD_OFFSET + 2

#define DRIVEMNG_DRVDEVICEID_SDIAS_OFFSET 16#20000

#define DRIVEMNG_DRVDEVICEID_DC061 DRIVEMNG_DRVDEVICEID_SDIAS_OFFSET + 16#180 // 1 = 1 Achse 80 SDIAS


#define DRIVEMNG_DRIVESCOPE_GETALL_PARAM    16#2080
#define DRIVEMNG_DRIVESCOPE_SCOPE_BIT       16#60000000
#define DRIVEMNG_DRIVESCOPE_SINDEX_RANGE    511


#endif // _T_DRIVEMNGBASE_H
//Define part of class Varan_Base
#ifndef _T_VARANBASE_H
#define _T_VARANBASE_H

#define	VARAN_PLL_OFFSET		16#0140
#define VARAN_MULTIPLE_OFFSET	16#01AC

// version of serial number validation (16#10 = 1.0)
#define SERNO_VALIDATION_VERSION 16#10

#define IsTransparent_IS_AVAILABLE

// Defines for Mutex Generation
#define VARAN_STR_MUTEX_NAME_SEPERATOR ".."
#define VARAN_MUTEX_NAME_END_LENGTH 5
#define VARAN_MUTEX_NAME_MAX_LENGTH 32


#define VARAN_SPI_IDENT_LICENCENO_OFFSET    16#14
#define VARAN_SPI_IDENT_HARDWAREVER_OFFSET  16#18


#endif // _T_VARANBASE_H
//Define part of class _VaranDriveBase
#ifndef _T_VARANDRIVEBASE_H
#define _T_VARANDRIVEBASE_H

#define VAC011_DEVICE_ID		              1005					// device id of VAC011
#define VAC012_DEVICE_ID		              1061					// device id of VAC012
#define VAC013_DEVICE_ID		              1075					// device id of VAC012

#define DIASDRIVE_MAXI_DEVICE_ID          1070          // device id of Dias Drive Maxi
#define DIASDRIVE_MINI_DEVICE_ID          1071          // device id of Dias Drive Mini


//#define DIASDRIVE_WaitTime_ns		            1ms * 1000 * 1000	//time in ns to send next DO in async mode

#define DIASDRIVE_OFFSET_Axis		            16#40							// memory for every axis (offset for axis 1 is 0, for axis 2 is 16#40..)
#define DIASDRIVE_OFFSET_AxisRead	          16#20							//Offset to read data of one axis
#define DIASDRIVE_OFFSET_FAST_AXIS_WRITE    16#C0
#define DIASDRIVE_OFFSET_FAST_AXIS_READ     DIASDRIVE_OFFSET_FAST_AXIS_WRITE + 16#22

#define DIASDRIVE_QUIT_ERROR_WAIT_TIME    50  // in ms

// drive address mapping
#define DIASDRIVE_ADR_ALT_BUF             16#0000  // memory offset for alternating buffer of drive
#define DIASDRIVE_ADR_SERVICE             16#1000  // memory offset for service data of drive
#define DIASDRIVE_ADR_PLL                 16#2000  // memory offset for PLL of drive
#define DIASDRIVE_ADR_LVDS_BUS            16#3000  // memory offset for lvds bus interface of drive
#define DIASDRIVE_ADR_LVDS_DIAG           16#4000  // memory offset for lvds diagnostic of drive

#define DIASDRIVE_ADR_INPUTS              16#4900  // memory offset of digital inputs


#define DIASDRIVE_ADR_OFFSET_CHANNEL      16#0800  // memory for every channel
#define DIASDRIVE_ADR_OFFSET_AXIS         16#0200  // memory for every axis

#define DIASDRIVE_ADR_AXIS_WR_OFFSET      16#0000  // offset to access write data
#define DIASDRIVE_ADR_AXIS_RD_OFFSET      16#0100  // offset to access read data

#define DIASDRIVE_ADR_ALT_BUF_RD_OFFSET   16#0400
#define DIASDRIVE_ADR_ALT_BUF_WR_OFFSET   16#0000

#define DIASDRIVE_ADR_SERVICE_READ        16#0030
#define DIASDRIVE_ADR_SERVICE_WRITE       16#0000

#define DIASDRIVE_MAX_AXIS                8
#define DIASDRIVE_MAX_AXIS_PER_MODULE     3
#define DIASDRIVE_MAX_AXIS_300            3 // with dias drive 300 only up to 3 axis possible

#define WRITETIME_TO_DPRAM                1000 // time in ns to write data to manager dpram

#define MULTIVARAN_ADD_DO_INTO_DOL        16#00001003 //version since we can add iso dos in updatecy 
#endif // _T_VARANDRIVEBASE_H
//Define part of class AM441
#define DEVICE_ID_AM441             1017

#define AM441_ADDR_CYC_WRITE        16#000
#define AM441_ADDR_CYC_READ         16#080
#define AM441_ADDR_CFG_FIRMWARE     16#100
#define AM441_ADDR_STATE_FIRMWARE   16#180

#define AM441_SDO_RESPONSE_TIMEOUT  SDIAS_SDO_TIMEOUT * 2

#define AM441_NUMBER_OF_ANALOG_IN   4
#define AM441_INVALID_VALUE         16#80000010$DINT

#define AM441_FIRMWARE_MIN          -10000
#define AM441_FIRMWARE_MAX          10000
//Define part of class BusInterfaceSdias
#define BUS_IF_SDIAS_MAX_NR_DO 100
#include "..\..\Source\BusInterface.h"
//Define part of class BusInterfaceSDIASInternal
#define BUSIF_INTERNAL_MAX_NR_DO 100

// Defines for Mutex Generation
#define INTERNAL_STR_MUTEX_NAME_SEPERATOR ".."
#define INTERNAL_MUTEX_NAME_END_LENGTH 5
#define INTERNAL_MUTEX_NAME_MAX_LENGTH 32
#include <.\lsl_st_mt.h>
//Define part of class DI200
#define DEVICE_ID_DI200 1001
#include "..\..\Class\HwControl\watchdog.h"
//Define part of class SafetyBase
// always allocate blocks for 5 more SDOs
#define SB_SDO_BUFFER_ALLOC_BLOCK 5

// time between the CRC-Checks (CRC-Check to find out if configuration has changed)
#define SB_CRC_CHECK_TIME  5000

// time between we read out the retrycounter from the module.
#define SB_RETRY_COUNTER_WAIT_TIME 10000

#define SB_TDO_BUFFER_SIZE 50

// time for SDO transfer
#define SB_SDO_TRANSFERTIME 30 // maximum measured time at mover was 22ms + 3ms reserve

// timeout for optional modules to be synchron
#define SB_OPTIONAL_MODULE_SYNC_TIMEOUT  5000

// maximum number of tries to execute an asynchronous command (5 = if 5 consecutive tries to make an asynchronous communication fail, the class goes into error _AsyncComError)
#define SB_SDO_MAX_TRIES 5

#define SB_RETRY_COUNTER_AVAILABLE_MAJOR_REV 1000
#define SB_RETRY_COUNTER_AVAILABLE_MINOR_REV 338

// if defined, the DO traffic is monitored
//#define DO_DEBUG
#ifdef DO_DEBUG
#pragma message("DO_DEBUG for Safety-Modules activated! Needs more CPU ressources!")
#endif
#include <.\lsl_st_safety.h>
#include "..\..\Class\SafetyManager\SafetyManager.h"
#include "..\..\Class\SafetyBase\SafetyBase.h"
//Define part of class SafetyManager
#define LogBufferSize 1000
#include <.\lsl_st_safetydll.h>
//Define part of class SCP011
#define SCP011_DEVICE_ID 1000
//Define part of class SdiasManager
#define SDIAS_SDO_MAX_LENGTH              128
#define SDIAS_SDO_RINGBUFFER_NO            64
#define SDIAS_SDO_CHANNEL_NO                3   // fixed in the VI hardware to be 3

// watchdog trigger interval (after 130ms of no trigger the SDIAS HW goes into reset again and takes at least another 10ms to be ready again)
#define SDIAS_WATCHDOG_TRIGGER_TIME        40

// time needed by sdias modules to start up after the watchdog is triggered the first time in ms
#define SDIAS_HARDWARE_STARTUP_TIME        15

// sdias manager needs 2 ticks to handle event for read task (measure sync time)
#define SDIAS_SYNC_MEASURE_TICKS            2

// after activating the PLL SyncOut it takes 3 cycles until the SDIAS sync can be injected
#define SDIAS_CYCLES_WAIT_AFTER_SYNC_ENABLE 3

// wait 1 bus cycle at start to get valid numbers in the task info
#define SDIAS_TASKINFO_READY_TICKS          1

// time to wait (in ms) until other tasks in the same or lower priority than post init have done their stuff
#define SDIAS_WAIT_TIME_IN_POST_INIT        1

#define SIZE_PER_SDIAS_CLIENT               16#0400

#define SDIAS_OFFSET_HW_CONFIG              16#FF00
#define SDIAS_OFFSET_TASK_EVENT_IDS         16#FF10
#define SDIAS_OFFSET_APPLI_LED_STATES       16#FF20
#define SDIAS_OFFSET_SYNC_INJECTION_CFG     16#FF3D
#define SDIAS_OFFSET_TRIGGER_UNIT_SETUP_0   16#FF41
#define SDIAS_OFFSET_TRIGGER_UNIT_SETUP_1   16#FF45
#define SDIAS_OFFSET_TASK_START_CFG_0       16#FF60
#define SDIAS_OFFSET_TASK_CONFIG_0          16#FF86
#define SDIAS_OFFSET_TASK_CONFIG_1          16#FF96
#define SDIAS_OFFSET_TASK_INFO_1            16#FF94
#define SDIAS_OFFSET_TASK_HANDSHAKE_1       16#FF9B
#define SDIAS_OFFSET_TASK_CONFIG_2          16#FFA6

#define SDIAS_RETRIES_ALLOWED         2

// mask to get global error flag out of message counter byte of SDO responses
#define SDIAS_MASK_GLOBAL_ERROR_FLAG        16#80

// mask to get message counter out of message counter byte of SDO responses
#define SDIAS_MASK_MESSAGE_COUNTER          16#3F


#define SDIAS_EVENT_MASK_ID_SYNC_OUT0       16#10
#define SDIAS_EVENT_MASK_ID_SYNC_OUT1       16#11
#define SDIAS_EVENT_MASK_ID_SYNC_OUT2       16#12
#define SDIAS_EVENT_MASK_ID_SYNC_OUT3       16#13

#define SDIAS_PLACE_NO_MODULE_ADDED_SO_FAR  16#80000000

#define SDIAS_TRIGGER_UNIT_BYTE_SIZE        2

#define SDIAS_WAIT_TIME_FIRMWARE_HANDSHAKE  5 * 1000

// timeout for blocking the init during initialisation (in ms)
#define SDIAS_INIT_BLOCK_TIMEOUT            20 * 1000

#define SDIAS_MUTEX_NAME_END_LENGTH 3
#define SDIAS_MUTEX_NAME_MAX_LENGTH 32
#define SDIAS_MUTEX_STR_SEPERATOR   ".."

//#define SDIAS_RT_TIME_MEASUREMENT
#ifdef SDIAS_RT_TIME_MEASUREMENT
  #pragma message("ATTENTION: SDIAS real time measurement is active and needs additional ressources in the realtime task")
#endif


(* SDIAS data object commands  *)
#define	 SDIAS_CMD_END							  0x00			(* End command										          *)
#define	 SDIAS_CMD_ACC_MEMORY				  0x01			(* Access dpram memory								      *)
#define	 SDIAS_CMD_ACC_CONTROL				0x02			(* Access dpram control memory						  *)
#define	 SDIAS_CMD_GLOBAL						  0x03			(* SDIAS global command								      *)
#define	 SDIAS_CMD_COPY_LOCAL					0x04			(* DPRAM copy command in local dpram				*)
#define	 SDIAS_CMD_JMP_LOCAL					0x05			(* DPRAM jump command in local dpram 				*)

(* SDIAS defines for data object handling *)
// Write data oject list
#define	 SDIAS_DOL_WRITE_USAGE_DOL_EMPTY	  0x20			(* Usage of empty write dol list (wachtdog trigger + end command)   *)
#define	 SDIAS_DOL_WRITE_USAGE_DTA_EMPTY	  0x03			(* Usage of empty write dol data (DO ctrl of 2x copy command for task information + DO ctrl of watchdog trigger      *)
#define	 SDIAS_DOL_WRITE_OFFSET_END_CMD			0x10			(* One data object in list - offset = 1 DO size = 0x10						  *)
#define	 SDIAS_DOL_WRITE_OFFSET_FIRST_DTA		0x02			(* Offset of first data byte of second copy command = 2 (DO ctrl)   *)
#define	 SDIAS_DOL_WRITE_OFFSET_LAST_DTA		0x02			(* Offset of last data byte of second copy command = 2 (DO ctrl )   *)

// Read data oject list
#define	 SDIAS_DOL_READ_USAGE_DOL_EMPTY	    0x30			(* Usage of empty read dol list (2x task info copy command + end command)   *)
#define	 SDIAS_DOL_READ_USAGE_DTA_EMPTY	    0x0D			(* Usage of empty write dol data (DO ctrl of 2x copy command for task information + DO ctrl of watchdog trigger      *)
#define	 SDIAS_DOL_READ_OFFSET_END_CMD			0x20			(* One data object in list - offset = 1 DO size = 0x10						          *)
#define	 SDIAS_DOL_READ_OFFSET_FIRST_DTA		0x07			(* Offset of first data byte of second copy command = 7 = DO state          *)
#define	 SDIAS_DOL_READ_OFFSET_LAST_DTA		  0x0C			(* Offset of last data byte of second copy command = 12 (last byte of task information)       *)

//Versionsnumber where SDIAS SPI Read Accesses are available
#define  SDIAS_SDO_SPI_FIRMWARE_VERSION_AVAILABLE 16#0120

//error info mask
#define  SDIAS_ERROR_INFO_MASK    2#1000011000011111
//Define part of class SdiasPLC
#define SDIASM_OBJECT_PATH            16#88000002   // Object Path for VSDIASmanager Length = 2 (First 2byte), Domain = 0 (3rd byte), Escape Sequence SDIAS (4th byte)
#include "..\..\Class\SdiasSafetyManager\SdiasSafetyManager.h"
//Define part of class TO127
#define DEVICE_ID_TO127 1003

#define TO127_ADDR_CYC_WRITE  0
#define TO127_ADDR_CYC_READ   2

#define TO127_WRITE_LENGTH    2
#define TO127_READ_LENGTH     2
//Define part of class VaranManager
#define SIZE_PAYLOAD_FRAME_HEADER_DO      16#38  // Const because datasize is in the Payload DOs
#define SIZE_PAYLOAD_IRQ_FRAME_HEADER_DO  16#40  // Const because datasize is in the Payload DOs

#define VM_MAX_POST_INIT_MODULES  1000

#define VM_OBJECT_PATH            16#81000002   // Object Path for Varanmanager Length = 2 (First 2byte), Domain = 0 (3rd byte), Escape Sequence Varan (4th byte)
#include "..\..\Class\VaranManager\VaranManager.h"
#include <.\lsl_st_kernel.h>
//Define part of class VaranManager_2
// needed to use the same code as the other managing modules
#define VM2_SYNCHRON SuperiorSystemOK

#define VM2_SDO_INIT_CMD_LENGTH   12


FUNCTION GLOBAL TAB ONE_HW_Network
-1$UINT, 0$UINT, 
0$UINT, 0$UINT,

39$UDINT,
TO_UDINT(1048633017), "_BusInterfaceSdiasDriveMng", 1$UINT, 7$UINT, 1$UINT,
TO_UDINT(912370472), "_DriveAxis", 1$UINT, 58$UINT, 2$UINT,
TO_UDINT(4124502522), "_DriveAxisBase", 1$UINT, 67$UINT, 0$UINT,
TO_UDINT(833307860), "_DriveAxisSet", 1$UINT, 20$UINT, 2$UINT,
TO_UDINT(1470062879), "_DriveMng_DC062", 1$UINT, 7$UINT, 1$UINT,
TO_UDINT(1066369953), "_DriveMng_MDD100", 1$UINT, 54$UINT, 1$UINT,
TO_UDINT(496739206), "_DriveMngBase", 1$UINT, 39$UINT, 0$UINT,
TO_UDINT(766164962), "_VaranDriveBase", 1$UINT, 58$UINT, 1$UINT,
TO_UDINT(56211589), "AM441", 1$UINT, 27$UINT, 1$UINT,
TO_UDINT(2368828999), "BusInterfaceSdias", 1$UINT, 17$UINT, 0$UINT,
TO_UDINT(3882880897), "BusInterfaceSDIASInternal", 1$UINT, 27$UINT, 0$UINT,
TO_UDINT(1396517250), "DI200", 1$UINT, 36$UINT, 1$UINT,
TO_UDINT(3238133653), "Hub_Base", 1$UINT, 20$UINT, 1$UINT,
TO_UDINT(1770276445), "Hub_Base_Root", 2$UINT, 10$UINT, 2$UINT,
TO_UDINT(2471641665), "HwControl", 4$UINT, 0$UINT, 1$UINT,
TO_UDINT(1193052171), "HwControlBase", 1$UINT, 10$UINT, 0$UINT,
TO_UDINT(4260294091), "HWRtPostScan", 1$UINT, 0$UINT, 1$UINT,
TO_UDINT(2225119864), "MerkerEx", 1$UINT, 21$UINT, 15$UINT,
TO_UDINT(933570811), "RAMex", 1$UINT, 16$UINT, 2$UINT,
TO_UDINT(3591333481), "RamFile", 1$UINT, 9$UINT, 1$UINT,
TO_UDINT(4109957215), "SafetyBase", 1$UINT, 22$UINT, 0$UINT,
TO_UDINT(1799751072), "SafetyManager", 2$UINT, 0$UINT, 1$UINT,
TO_UDINT(1550718169), "SCP011", 1$UINT, 31$UINT, 1$UINT,
TO_UDINT(3175101883), "SdiasBase", 1$UINT, 51$UINT, 0$UINT,
TO_UDINT(4173303375), "SdiasHubBase", 1$UINT, 10$UINT, 1$UINT,
TO_UDINT(2118381352), "SdiasManager", 1$UINT, 75$UINT, 1$UINT,
TO_UDINT(1159122596), "SdiasPLC", 1$UINT, 38$UINT, 1$UINT,
TO_UDINT(2010300054), "SdiasSafetyBase", 1$UINT, 6$UINT, 0$UINT,
TO_UDINT(2292222393), "SdiasSafetyManager", 1$UINT, 25$UINT, 1$UINT,
TO_UDINT(2650799298), "SDM081", 1$UINT, 4$UINT, 1$UINT,
TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 13$UINT,
TO_UDINT(2898603620), "StringInternal", 1$UINT, 80$UINT, 0$UINT,
TO_UDINT(3097667748), "TO127", 1$UINT, 38$UINT, 1$UINT,
TO_UDINT(862125188), "Varan_Base", 2$UINT, 7$UINT, 0$UINT,
TO_UDINT(2940693151), "VaranManager", 2$UINT, 26$UINT, 0$UINT,
TO_UDINT(4019434288), "VaranManager_2", 1$UINT, 68$UINT, 1$UINT,
TO_UDINT(4035182347), "VaranManager_Base", 1$UINT, 21$UINT, 0$UINT,
TO_UDINT(803224590), "VaranManagerPostScan", 1$UINT, 1$UINT, 1$UINT,
TO_UDINT(3232495061), "VirtualBaseInit", 1$UINT, 3$UINT, 0$UINT,

1$UINT, TO_UDINT(1755887647), "_DRIVEMNG_DC0621\BUSINTERFACESDIASDRIVEMNG", 

_NO_ATTR, TO_UDINT(3059689190), "_DRIVEAXIS1", 
_NO_ATTR, TO_UDINT(794195804), "_DRIVEAXIS2", 


1$UINT, TO_UDINT(4275951967), "_DRIVEAXIS1\SDDAXSET1", 
1$UINT, TO_UDINT(1732231006), "_DRIVEAXIS2\SDDAXSET1", 

_NO_ATTR, TO_UDINT(243498275), "_DRIVEMNG_DC0621", 

_NO_ATTR, TO_UDINT(573764426), "_DRIVEMNG_MDD1001", 


1$UINT, TO_UDINT(393328527), "_DRIVEMNG_MDD1001\VARANDRIVEBASE", 

_NO_ATTR, TO_UDINT(504218016), "AM4411", 



_NO_ATTR, TO_UDINT(2151231634), "DI2001", 

1$UINT, TO_UDINT(727478173), "_DRIVEMNG_MDD1001\VARANDRIVEBASE\HUB_BASE0", 

1$UINT, TO_UDINT(980975553), "VARANMANAGER_21\HUB_BASE_ROOT0", 
1$UINT, TO_UDINT(1300189015), "VARANMANAGER_21\HUB_BASE_ROOT1", 

_NO_ATTR, TO_UDINT(2190789875), "HWCONTROL1", 


1$UINT, TO_UDINT(1673205898), "HWCONTROL1\HWRTPOSTSCAN", 

1$UINT, TO_UDINT(1811543353), "AM4411\_BASE\SERIALNOSTR\MERKEREX0", 
1$UINT, TO_UDINT(1208546408), "DI2001\_BASE\SERIALNOSTR\MERKEREX0", 
1$UINT, TO_UDINT(547935953), "SCP0111\SDIASSAFETYMANAGER1\PROJECTNAMESTR\MERKEREX0", 
1$UINT, TO_UDINT(2833564448), "SCP0111\SDIASSAFETYMANAGER1\PROJECTREVISIONSTR\MERKEREX0", 
1$UINT, TO_UDINT(1323976686), "SCP0111\_BASE\_BASE\SERIALNOSTR\MERKEREX0", 
1$UINT, TO_UDINT(2288011539), "SDM0811\_BASE\SERIALNOSTR\MERKEREX0", 
1$UINT, TO_UDINT(3127115716), "TO1271\_BASE\SERIALNOSTR\MERKEREX0", 
1$UINT, TO_UDINT(3868254288), "_DRIVEAXIS1\MERKEREX2", 
1$UINT, TO_UDINT(2138211921), "_DRIVEAXIS2\MERKEREX2", 
1$UINT, TO_UDINT(1361534785), "_DRIVEMNG_DC0621\BUSINTERFACESDIASDRIVEMNG\_BASE\SERIALNOSTR\MERKEREX0", 
1$UINT, TO_UDINT(570430050), "_DRIVEMNG_DC0621\FWDATESTRING\MERKEREX0", 
1$UINT, TO_UDINT(1339808896), "_DRIVEMNG_DC0621\FWNUMSTRING\MERKEREX0", 
1$UINT, TO_UDINT(2184566686), "_DRIVEMNG_MDD1001\FWDATESTRING\MERKEREX0", 
1$UINT, TO_UDINT(1895585888), "_DRIVEMNG_MDD1001\FWNUMSTRING\MERKEREX0", 
1$UINT, TO_UDINT(3219616318), "_DRIVEMNG_MDD1001\VARANDRIVEBASE\_BASE\SERIALNOSTR\MERKEREX0", 

1$UINT, TO_UDINT(3414815221), "_DRIVEAXIS1\RAMEX2", 
1$UINT, TO_UDINT(1158084118), "_DRIVEAXIS2\RAMEX2", 

1$UINT, TO_UDINT(459173371), "_DRIVEMNG_MDD1001\VARANDRIVEBASE\_BASE\SERNOBACKUP", 


1$UINT, TO_UDINT(1778590035), "HWCONTROL1\SAFETYMANAGER", 

_NO_ATTR, TO_UDINT(2089806803), "SCP0111", 


1$UINT, TO_UDINT(1007630054), "SDIASPLC1\SDIASHUBBASE1", 

1$UINT, TO_UDINT(4015996540), "SDIASPLC1\SDIASMANAGER1", 

_NO_ATTR, TO_UDINT(1378000520), "SDIASPLC1", 


1$UINT, TO_UDINT(25697138), "SCP0111\SDIASSAFETYMANAGER1", 

_NO_ATTR, TO_UDINT(4130059223), "SDM0811", 

1$UINT, TO_UDINT(814212766), "AM4411\_BASE\SERIALNOSTR", 
1$UINT, TO_UDINT(3717716232), "DI2001\_BASE\SERIALNOSTR", 
1$UINT, TO_UDINT(1709141428), "SCP0111\SDIASSAFETYMANAGER1\PROJECTNAMESTR", 
1$UINT, TO_UDINT(1973778473), "SCP0111\SDIASSAFETYMANAGER1\PROJECTREVISIONSTR", 
1$UINT, TO_UDINT(1798690622), "SCP0111\_BASE\_BASE\SERIALNOSTR", 
1$UINT, TO_UDINT(802639168), "SDM0811\_BASE\SERIALNOSTR", 
1$UINT, TO_UDINT(1942937313), "TO1271\_BASE\SERIALNOSTR", 
1$UINT, TO_UDINT(189353776), "_DRIVEMNG_DC0621\BUSINTERFACESDIASDRIVEMNG\_BASE\SERIALNOSTR", 
1$UINT, TO_UDINT(275191107), "_DRIVEMNG_DC0621\FWDATESTRING", 
1$UINT, TO_UDINT(1236665617), "_DRIVEMNG_DC0621\FWNUMSTRING", 
1$UINT, TO_UDINT(3683859222), "_DRIVEMNG_MDD1001\FWDATESTRING", 
1$UINT, TO_UDINT(3693862049), "_DRIVEMNG_MDD1001\FWNUMSTRING", 
1$UINT, TO_UDINT(1443427331), "_DRIVEMNG_MDD1001\VARANDRIVEBASE\_BASE\SERIALNOSTR", 


_NO_ATTR, TO_UDINT(1390357230), "TO1271", 



_NO_ATTR, TO_UDINT(2783595688), "VARANMANAGER_21", 


1$UINT, TO_UDINT(4262145622), "VARANMANAGER_21\_BASE\VARANMASTERPOSTSCAN", 


//Internal connections
0$UDINT,
44$UDINT,
TO_UDINT(0), "SerialNoStr", TO_UDINT(47),
TO_UDINT(1), "SDDAxSet1", TO_UDINT(3),
TO_UDINT(1), "MerkerEx2", TO_UDINT(22),
TO_UDINT(1), "RAMex2", TO_UDINT(30),
TO_UDINT(2), "SDDAxSet1", TO_UDINT(4),
TO_UDINT(2), "MerkerEx2", TO_UDINT(23),
TO_UDINT(2), "RAMex2", TO_UDINT(31),
TO_UDINT(5), "FWDateString", TO_UDINT(48),
TO_UDINT(5), "FWNumSTring", TO_UDINT(49),
TO_UDINT(5), "BusInterfaceSdiasDriveMng", TO_UDINT(0),
TO_UDINT(6), "FWDateString", TO_UDINT(50),
TO_UDINT(6), "FWNumSTring", TO_UDINT(51),
TO_UDINT(6), "VaranDriveBase", TO_UDINT(7),
TO_UDINT(7), "SerialNoStr", TO_UDINT(52),
TO_UDINT(7), "SerNoBackup", TO_UDINT(32),
TO_UDINT(7), "Hub_Base0", TO_UDINT(10),
TO_UDINT(8), "SerialNoStr", TO_UDINT(40),
TO_UDINT(9), "SerialNoStr", TO_UDINT(41),
TO_UDINT(13), "HWRtPostScan", TO_UDINT(14),
TO_UDINT(13), "SafetyManager", TO_UDINT(33),
TO_UDINT(34), "SerialNoStr", TO_UDINT(44),
TO_UDINT(34), "SdiasSafetyManager1", TO_UDINT(38),
TO_UDINT(37), "SdiasManager1", TO_UDINT(36),
TO_UDINT(37), "SdiasHubBase1", TO_UDINT(35),
TO_UDINT(38), "ProjectNameStr", TO_UDINT(42),
TO_UDINT(38), "ProjectRevisionStr", TO_UDINT(43),
TO_UDINT(39), "SerialNoStr", TO_UDINT(45),
TO_UDINT(40), "MerkerEx0", TO_UDINT(15),
TO_UDINT(41), "MerkerEx0", TO_UDINT(16),
TO_UDINT(42), "MerkerEx0", TO_UDINT(17),
TO_UDINT(43), "MerkerEx0", TO_UDINT(18),
TO_UDINT(44), "MerkerEx0", TO_UDINT(19),
TO_UDINT(45), "MerkerEx0", TO_UDINT(20),
TO_UDINT(46), "MerkerEx0", TO_UDINT(21),
TO_UDINT(47), "MerkerEx0", TO_UDINT(24),
TO_UDINT(48), "MerkerEx0", TO_UDINT(25),
TO_UDINT(49), "MerkerEx0", TO_UDINT(26),
TO_UDINT(50), "MerkerEx0", TO_UDINT(27),
TO_UDINT(51), "MerkerEx0", TO_UDINT(28),
TO_UDINT(52), "MerkerEx0", TO_UDINT(29),
TO_UDINT(53), "SerialNoStr", TO_UDINT(46),
TO_UDINT(54), "VaranMasterPostScan", TO_UDINT(55),
TO_UDINT(54), "Hub_Base_Root0", TO_UDINT(11),
TO_UDINT(54), "Hub_Base_Root1", TO_UDINT(12),
0$UDINT,
47$UDINT,
TO_UDINT(1), "DriveMng", TO_UDINT(6), "CmdState",
TO_UDINT(1), "DriveAxisSet", TO_UDINT(3), "Server0",
TO_UDINT(2), "DriveMng", TO_UDINT(5), "CmdState",
TO_UDINT(2), "DriveAxisSet", TO_UDINT(4), "Server0",
TO_UDINT(3), "coMerkerEx", TO_UDINT(22), "m_udLength",
TO_UDINT(3), "coRamEx", TO_UDINT(30), "m_udLength",
TO_UDINT(4), "coMerkerEx", TO_UDINT(23), "m_udLength",
TO_UDINT(4), "coRamEx", TO_UDINT(31), "m_udLength",
TO_UDINT(5), "cOnline", TO_UDINT(0), "Online",
TO_UDINT(5), "FwNumStr", TO_UDINT(49), "Data",
TO_UDINT(5), "FwDatetr", TO_UDINT(48), "Data",
TO_UDINT(5), "ToBusIF", TO_UDINT(0), "CallCommand",
TO_UDINT(5), "SdiasIn", TO_UDINT(35), "ClassSvr",
TO_UDINT(6), "toVaran", TO_UDINT(7), "State",
TO_UDINT(6), "cOnline", TO_UDINT(7), "Online",
TO_UDINT(6), "FwNumStr", TO_UDINT(51), "Data",
TO_UDINT(6), "FwDatetr", TO_UDINT(50), "Data",
TO_UDINT(6), "VaranIn", TO_UDINT(12), "Control",
TO_UDINT(8), "SdiasIn", TO_UDINT(35), "ClassSvr",
TO_UDINT(9), "SdiasIn", TO_UDINT(35), "ClassSvr",
TO_UDINT(10), "VaranIn", TO_UDINT(7), "State",
TO_UDINT(11), "VaranConnect", TO_UDINT(54), "Control",
TO_UDINT(12), "VaranConnect", TO_UDINT(54), "Control",
TO_UDINT(14), "toHwControlBase", TO_UDINT(13), "Control",
TO_UDINT(33), "To_HwControl", TO_UDINT(13), "Control",
TO_UDINT(34), "SdiasIn", TO_UDINT(35), "ClassSvr",
TO_UDINT(35), "ToNextSDIAS", TO_UDINT(36), "ClassState",
TO_UDINT(36), "ToBusInterface", TO_UDINT(37), "CallCommand",
TO_UDINT(37), "ToHwControl", TO_UDINT(13), "Control",
TO_UDINT(38), "ToBusInterface", TO_UDINT(34), "CallCommand",
TO_UDINT(39), "SdiasSafetyIn", TO_UDINT(38), "SdiasSafetyOut",
TO_UDINT(40), "DataBuffer", TO_UDINT(15), "m_udLength",
TO_UDINT(41), "DataBuffer", TO_UDINT(16), "m_udLength",
TO_UDINT(42), "DataBuffer", TO_UDINT(17), "m_udLength",
TO_UDINT(43), "DataBuffer", TO_UDINT(18), "m_udLength",
TO_UDINT(44), "DataBuffer", TO_UDINT(19), "m_udLength",
TO_UDINT(45), "DataBuffer", TO_UDINT(20), "m_udLength",
TO_UDINT(46), "DataBuffer", TO_UDINT(21), "m_udLength",
TO_UDINT(47), "DataBuffer", TO_UDINT(24), "m_udLength",
TO_UDINT(48), "DataBuffer", TO_UDINT(25), "m_udLength",
TO_UDINT(49), "DataBuffer", TO_UDINT(26), "m_udLength",
TO_UDINT(50), "DataBuffer", TO_UDINT(27), "m_udLength",
TO_UDINT(51), "DataBuffer", TO_UDINT(28), "m_udLength",
TO_UDINT(52), "DataBuffer", TO_UDINT(29), "m_udLength",
TO_UDINT(53), "SdiasIn", TO_UDINT(35), "ClassSvr",
TO_UDINT(54), "To_HwControl", TO_UDINT(13), "Control",
TO_UDINT(55), "ManagerConnect", TO_UDINT(54), "Control",

//Initialization values
0$UDINT,
105$UDINT,
TO_UDINT(0), "LEDControl", TO_UDINT(0),//|HW_Network._DriveMng_DC0621\BusInterfaceSdiasDriveMng.LEDControl;
TO_UDINT(0), "Place", TO_UDINT(2),//|HW_Network._DriveMng_DC0621\BusInterfaceSdiasDriveMng.Place;
TO_UDINT(0), "Required", TO_UDINT(1),//|HW_Network._DriveMng_DC0621\BusInterfaceSdiasDriveMng.Required;
TO_UDINT(0), "TimeMultiplier", TO_UDINT(1),//|HW_Network._DriveMng_DC0621\BusInterfaceSdiasDriveMng.TimeMultiplier;
TO_UDINT(0), "SdiasID", TO_UDINT(1801),//|HW_Network._DriveMng_DC0621\BusInterfaceSdiasDriveMng.SdiasID;
TO_UDINT(1), "Place", TO_UDINT(0),//|HW_Network._DriveAxis1.Place;
TO_UDINT(1), "AxisNo", TO_UDINT(1),//|HW_Network._DriveAxis1.AxisNo;
TO_UDINT(1), "ParaSaveType", TO_UDINT(1),//|HW_Network._DriveAxis1.ParaSaveType;
TO_UDINT(1), "OverwriteMotorPara", TO_UDINT(0),//|HW_Network._DriveAxis1.OverwriteMotorPara;
TO_UDINT(2), "Place", TO_UDINT(0),//|HW_Network._DriveAxis2.Place;
TO_UDINT(2), "AxisNo", TO_UDINT(1),//|HW_Network._DriveAxis2.AxisNo;
TO_UDINT(2), "ParaSaveType", TO_UDINT(1),//|HW_Network._DriveAxis2.ParaSaveType;
TO_UDINT(2), "OverwriteMotorPara", TO_UDINT(0),//|HW_Network._DriveAxis2.OverwriteMotorPara;
TO_UDINT(3), "ParaSaveType", TO_UDINT(1),//|HW_Network._DriveAxis1\SDDAxSet1.ParaSaveType;
TO_UDINT(3), "OverwriteMotorPara", TO_UDINT(0),//|HW_Network._DriveAxis1\SDDAxSet1.OverwriteMotorPara;
TO_UDINT(4), "ParaSaveType", TO_UDINT(1),//|HW_Network._DriveAxis2\SDDAxSet1.ParaSaveType;
TO_UDINT(4), "OverwriteMotorPara", TO_UDINT(0),//|HW_Network._DriveAxis2\SDDAxSet1.OverwriteMotorPara;
TO_UDINT(5), "Place", TO_UDINT(2),//|HW_Network._DriveMng_DC0621.Place;
TO_UDINT(5), "Required", TO_UDINT(1),//|HW_Network._DriveMng_DC0621.Required;
TO_UDINT(5), "TimeMultiplier", TO_UDINT(1),//|HW_Network._DriveMng_DC0621.TimeMultiplier;
TO_UDINT(6), "Required", TO_UDINT(1),//|HW_Network._DriveMng_MDD1001.Required;
TO_UDINT(6), "Transparent", TO_UDINT(0),//|HW_Network._DriveMng_MDD1001.Transparent;
TO_UDINT(6), "FetchDigitalInputs", TO_UDINT(0),//|HW_Network._DriveMng_MDD1001.FetchDigitalInputs;
TO_UDINT(7), "Required", TO_UDINT(1),//|HW_Network._DriveMng_MDD1001\VaranDriveBase.Required;
TO_UDINT(7), "Transparent", TO_UDINT(0),//|HW_Network._DriveMng_MDD1001\VaranDriveBase.Transparent;
TO_UDINT(7), "TimeBase", TO_UDINT(0),//|HW_Network._DriveMng_MDD1001\VaranDriveBase.TimeBase;
TO_UDINT(7), "TimeBaseOffset", TO_UDINT(0),//|HW_Network._DriveMng_MDD1001\VaranDriveBase.TimeBaseOffset;
TO_UDINT(7), "FetchDigitalInputs", TO_UDINT(0),//|HW_Network._DriveMng_MDD1001\VaranDriveBase.FetchDigitalInputs;
TO_UDINT(8), "LEDControl", TO_UDINT(0),//|HW_Network.AM4411.LEDControl;
TO_UDINT(8), "Place", TO_UDINT(3),//|HW_Network.AM4411.Place;
TO_UDINT(8), "Required", TO_UDINT(1),//|HW_Network.AM4411.Required;
TO_UDINT(8), "AI1_Min", TO_UDINT(-10000),//|HW_Network.AM4411.AI1_Min;
TO_UDINT(8), "AI1_Max", TO_UDINT(10000),//|HW_Network.AM4411.AI1_Max;
TO_UDINT(8), "AI2_Min", TO_UDINT(-10000),//|HW_Network.AM4411.AI2_Min;
TO_UDINT(8), "AI2_Max", TO_UDINT(10000),//|HW_Network.AM4411.AI2_Max;
TO_UDINT(8), "AI3_Min", TO_UDINT(-10000),//|HW_Network.AM4411.AI3_Min;
TO_UDINT(8), "AI3_Max", TO_UDINT(10000),//|HW_Network.AM4411.AI3_Max;
TO_UDINT(8), "AI4_Min", TO_UDINT(-10000),//|HW_Network.AM4411.AI4_Min;
TO_UDINT(8), "AI4_Max", TO_UDINT(10000),//|HW_Network.AM4411.AI4_Max;
TO_UDINT(8), "AO1_Min", TO_UDINT(-10000),//|HW_Network.AM4411.AO1_Min;
TO_UDINT(8), "AO1_Max", TO_UDINT(10000),//|HW_Network.AM4411.AO1_Max;
TO_UDINT(8), "AO2_Min", TO_UDINT(-10000),//|HW_Network.AM4411.AO2_Min;
TO_UDINT(8), "AO2_Max", TO_UDINT(10000),//|HW_Network.AM4411.AO2_Max;
TO_UDINT(8), "AO3_Min", TO_UDINT(-10000),//|HW_Network.AM4411.AO3_Min;
TO_UDINT(8), "AO3_Max", TO_UDINT(10000),//|HW_Network.AM4411.AO3_Max;
TO_UDINT(8), "AO4_Min", TO_UDINT(-10000),//|HW_Network.AM4411.AO4_Min;
TO_UDINT(8), "AO4_Max", TO_UDINT(10000),//|HW_Network.AM4411.AO4_Max;
TO_UDINT(9), "LEDControl", TO_UDINT(0),//|HW_Network.DI2001.LEDControl;
TO_UDINT(9), "Place", TO_UDINT(0),//|HW_Network.DI2001.Place;
TO_UDINT(9), "Required", TO_UDINT(1),//|HW_Network.DI2001.Required;
TO_UDINT(10), "Splitter_Place", TO_UDINT(0),//|HW_Network.VaranDriveBase\_DriveMng_MDD1001\Hub_Base0.Splitter_Place;
TO_UDINT(11), "Splitter_Place", TO_UDINT(0),//|HW_Network.VaranManager_21\Hub_Base_Root0.Splitter_Place;
TO_UDINT(12), "Splitter_Place", TO_UDINT(1),//|HW_Network.VaranManager_21\Hub_Base_Root1.Splitter_Place;
TO_UDINT(15), "ThreadSafe", TO_UDINT(0),//|HW_Network.SerialNoStr\_base\AM4411\MerkerEx0.ThreadSafe;
TO_UDINT(16), "ThreadSafe", TO_UDINT(0),//|HW_Network.SerialNoStr\_base\DI2001\MerkerEx0.ThreadSafe;
TO_UDINT(17), "ThreadSafe", TO_UDINT(0),//|HW_Network.ProjectNameStr\SdiasSafetyManager1\SCP0111\MerkerEx0.ThreadSafe;
TO_UDINT(18), "ThreadSafe", TO_UDINT(0),//|HW_Network.ProjectRevisionStr\SdiasSafetyManager1\SCP0111\MerkerEx0.ThreadSafe;
TO_UDINT(19), "ThreadSafe", TO_UDINT(0),//|HW_Network.SerialNoStr\_base\_base\SCP0111\MerkerEx0.ThreadSafe;
TO_UDINT(20), "ThreadSafe", TO_UDINT(0),//|HW_Network.SerialNoStr\_base\SDM0811\MerkerEx0.ThreadSafe;
TO_UDINT(21), "ThreadSafe", TO_UDINT(0),//|HW_Network.SerialNoStr\_base\TO1271\MerkerEx0.ThreadSafe;
TO_UDINT(22), "ThreadSafe", TO_UDINT(0),//|HW_Network._DriveAxis1\MerkerEx2.ThreadSafe;
TO_UDINT(23), "ThreadSafe", TO_UDINT(0),//|HW_Network._DriveAxis2\MerkerEx2.ThreadSafe;
TO_UDINT(24), "ThreadSafe", TO_UDINT(0),//|HW_Network.SerialNoStr\_base\BusInterfaceSdiasDriveMng\_DriveMng_DC0621\MerkerEx0.ThreadSafe;
TO_UDINT(25), "ThreadSafe", TO_UDINT(0),//|HW_Network.FWDateString\_DriveMng_DC0621\MerkerEx0.ThreadSafe;
TO_UDINT(26), "ThreadSafe", TO_UDINT(0),//|HW_Network.FWNumSTring\_DriveMng_DC0621\MerkerEx0.ThreadSafe;
TO_UDINT(27), "ThreadSafe", TO_UDINT(0),//|HW_Network.FWDateString\_DriveMng_MDD1001\MerkerEx0.ThreadSafe;
TO_UDINT(28), "ThreadSafe", TO_UDINT(0),//|HW_Network.FWNumSTring\_DriveMng_MDD1001\MerkerEx0.ThreadSafe;
TO_UDINT(29), "ThreadSafe", TO_UDINT(0),//|HW_Network.SerialNoStr\_base\VaranDriveBase\_DriveMng_MDD1001\MerkerEx0.ThreadSafe;
TO_UDINT(30), "ThreadSafe", TO_UDINT(0),//|HW_Network._DriveAxis1\RAMex2.ThreadSafe;
TO_UDINT(31), "ThreadSafe", TO_UDINT(0),//|HW_Network._DriveAxis2\RAMex2.ThreadSafe;
TO_UDINT(32), "Setup", TO_UDINT(2#1101),//|HW_Network._base\VaranDriveBase\_DriveMng_MDD1001\SerNoBackup.Setup;
TO_UDINT(34), "LEDControl", TO_UDINT(0),//|HW_Network.SCP0111.LEDControl;
TO_UDINT(34), "Place", TO_UDINT(4),//|HW_Network.SCP0111.Place;
TO_UDINT(34), "Required", TO_UDINT(1),//|HW_Network.SCP0111.Required;
TO_UDINT(34), "ServerUpdateTime", TO_UDINT(50),//|HW_Network.SCP0111.ServerUpdateTime;
TO_UDINT(35), "SplitterPlace", TO_UDINT(0),//|HW_Network.SdiasPLC1\SdiasHubBase1.SplitterPlace;
TO_UDINT(36), "DeviceID", TO_UDINT(0),//|HW_Network.SdiasPLC1\SdiasManager1.DeviceID;
TO_UDINT(37), "CycleTime", TO_UDINT(1000),//|HW_Network.SdiasPLC1.CycleTime;
TO_UDINT(37), "IsoStartPoint", TO_UDINT(50),//|HW_Network.SdiasPLC1.IsoStartPoint;
TO_UDINT(38), "ServerUpdateTime", TO_UDINT(50),//|HW_Network.SCP0111\SdiasSafetyManager1.ServerUpdateTime;
TO_UDINT(38), "DeviceID", TO_UDINT(SCP011_DEVICE_ID),//|HW_Network.SCP0111\SdiasSafetyManager1.DeviceID;
TO_UDINT(39), "Place", TO_UDINT(0),//|HW_Network.SDM0811.Place;
TO_UDINT(39), "Required", TO_UDINT(1),//|HW_Network.SDM0811.Required;
TO_UDINT(39), "SetDeviceID", TO_UDINT(2#101001),//|HW_Network.SDM0811.SetDeviceID;
TO_UDINT(39), "InputsNeeded", TO_UDINT(6),//|HW_Network.SDM0811.InputsNeeded;
TO_UDINT(39), "OutputsNeeded", TO_UDINT(2),//|HW_Network.SDM0811.OutputsNeeded;
TO_UDINT(40), "SingleRealloc", TO_UDINT(1),//|HW_Network._base\AM4411\SerialNoStr.SingleRealloc;
TO_UDINT(41), "SingleRealloc", TO_UDINT(1),//|HW_Network._base\DI2001\SerialNoStr.SingleRealloc;
TO_UDINT(42), "SingleRealloc", TO_UDINT(1),//|HW_Network.SdiasSafetyManager1\SCP0111\ProjectNameStr.SingleRealloc;
TO_UDINT(43), "SingleRealloc", TO_UDINT(1),//|HW_Network.SdiasSafetyManager1\SCP0111\ProjectRevisionStr.SingleRealloc;
TO_UDINT(44), "SingleRealloc", TO_UDINT(1),//|HW_Network._base\_base\SCP0111\SerialNoStr.SingleRealloc;
TO_UDINT(45), "SingleRealloc", TO_UDINT(1),//|HW_Network._base\SDM0811\SerialNoStr.SingleRealloc;
TO_UDINT(46), "SingleRealloc", TO_UDINT(1),//|HW_Network._base\TO1271\SerialNoStr.SingleRealloc;
TO_UDINT(47), "SingleRealloc", TO_UDINT(1),//|HW_Network._base\BusInterfaceSdiasDriveMng\_DriveMng_DC0621\SerialNoStr.SingleRealloc;
TO_UDINT(48), "SingleRealloc", TO_UDINT(1),//|HW_Network._DriveMng_DC0621\FWDateString.SingleRealloc;
TO_UDINT(49), "SingleRealloc", TO_UDINT(1),//|HW_Network._DriveMng_DC0621\FWNumSTring.SingleRealloc;
TO_UDINT(50), "SingleRealloc", TO_UDINT(1),//|HW_Network._DriveMng_MDD1001\FWDateString.SingleRealloc;
TO_UDINT(51), "SingleRealloc", TO_UDINT(1),//|HW_Network._DriveMng_MDD1001\FWNumSTring.SingleRealloc;
TO_UDINT(52), "SingleRealloc", TO_UDINT(1),//|HW_Network._base\VaranDriveBase\_DriveMng_MDD1001\SerialNoStr.SingleRealloc;
TO_UDINT(53), "LEDControl", TO_UDINT(0),//|HW_Network.TO1271.LEDControl;
TO_UDINT(53), "Place", TO_UDINT(1),//|HW_Network.TO1271.Place;
TO_UDINT(53), "Required", TO_UDINT(1),//|HW_Network.TO1271.Required;
TO_UDINT(54), "VaranManagerTime", TO_UDINT(1000000),//|HW_Network.VaranManager_21.VaranManagerTime;
TO_UDINT(54), "VaranManagerNr", TO_UDINT(0),//|HW_Network.VaranManager_21.VaranManagerNr;
TO_UDINT(54), "PayloadFrame", TO_UDINT(0),//|HW_Network.VaranManager_21.PayloadFrame;

//Symbolic initialization values
0$UDINT,
0$UDINT,

//Initialization of string values
0$UDINT,
0$UDINT,

//Configuration of tasks (RealTime, Cyclic, Background)
0$UDINT,
2$UDINT,
TO_UDINT(13), (1)$UDINT, 0$DINT, 	//HWCONTROL1
TO_UDINT(14), (1)$UDINT, 4194304$DINT, 	//HWCONTROL1\HWRTPOSTSCAN

0$UDINT,
3$UDINT,
TO_UDINT(5), (10)$UDINT, 4194303$DINT, 	//_DRIVEMNG_DC0621
TO_UDINT(6), (10)$UDINT, 4194303$DINT, 	//_DRIVEMNG_MDD1001
TO_UDINT(13), (1)$UDINT, 8388607$DINT, 	//HWCONTROL1

0$UDINT,
1$UDINT,
TO_UDINT(38), (100)$UDINT, 4194303$DINT, 	//SCP0111\SDIASSAFETYMANAGER1

//External connections
0$UDINT,
0$UDINT,

//Magic internal connections
0$UDINT,
23$UDINT,
TO_UDINT(0), "SdiasIn", TO_UDINT(5), "SdiasIn",
TO_UDINT(0), "Place", TO_UDINT(5), "Place",
TO_UDINT(0), "Required", TO_UDINT(5), "Required",
TO_UDINT(0), "TimeMultiplier", TO_UDINT(5), "TimeMultiplier",
TO_UDINT(3), "ParaSaveType", TO_UDINT(1), "ParaSaveType",
TO_UDINT(3), "OverwriteMotorPara", TO_UDINT(1), "OverwriteMotorPara",
TO_UDINT(3), "ParaTab", TO_UDINT(1), "ParaTab",
TO_UDINT(3), "FileHandle", TO_UDINT(1), "FileHandle",
TO_UDINT(3), "TableIndex", TO_UDINT(1), "TableIndex",
TO_UDINT(4), "ParaSaveType", TO_UDINT(2), "ParaSaveType",
TO_UDINT(4), "OverwriteMotorPara", TO_UDINT(2), "OverwriteMotorPara",
TO_UDINT(4), "ParaTab", TO_UDINT(2), "ParaTab",
TO_UDINT(4), "FileHandle", TO_UDINT(2), "FileHandle",
TO_UDINT(4), "TableIndex", TO_UDINT(2), "TableIndex",
TO_UDINT(7), "VaranIn", TO_UDINT(6), "VaranIn",
TO_UDINT(7), "Required", TO_UDINT(6), "Required",
TO_UDINT(7), "UserAction", TO_UDINT(6), "UserAction",
TO_UDINT(7), "SerNoValidation", TO_UDINT(6), "SerNoValidation",
TO_UDINT(7), "Transparent", TO_UDINT(6), "Transparent",
TO_UDINT(7), "VaranTimeMultiplier", TO_UDINT(6), "VaranTimeMultiplier",
TO_UDINT(7), "FetchDigitalInputs", TO_UDINT(6), "FetchDigitalInputs",
TO_UDINT(33), "SafetyDomainTimeout", TO_UDINT(13), "SafetyDomainTimeout",
TO_UDINT(38), "ServerUpdateTime", TO_UDINT(34), "ServerUpdateTime",

//Configuration of timeslots of tasks (RealTime, Cyclic)
#ifdef __LSLLDR_TIMESLOTS__
0$UDINT,
0$UDINT,

0$UDINT,
0$UDINT,

#endif //__LSLLDR_TIMESLOTS__

//MultiMaster connections
#ifdef __LSLLDR_MULTIMASTER__
0$UDINT,
0$UDINT,
#endif //__LSLLDR_MULTIMASTER__

END_FUNCTION