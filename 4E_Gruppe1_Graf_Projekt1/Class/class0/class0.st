//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "class0"
	Revision           = "0.0"
	GUID               = "{07961E5B-B999-4E13-B482-2BB8FA11E3EA}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	DefCyclictime      = "10 ms"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{519AB4C3-93A9-4114-9559-DDF82774768C}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="counter" GUID="{2CB93675-CB79-475D-9D18-BB48884741C4}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="hmiLight" GUID="{2F20BAB3-6F85-4892-8C34-3CE1CBE5E6A6}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="hmiStart" GUID="{2F4D5467-41BF-46A6-982C-E75040A53E7E}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ssw" GUID="{B9E876D1-2272-4990-8873-28CCDAD3A436}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="CYL" Required="true" Internal="false"/>
		<Client Name="lightbarrier" Required="true" Internal="false"/>
		<Client Name="MTR" Required="true" Internal="false"/>
		<Client Name="StartBTN" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
class0 : CLASS
	TYPE
	  _steps :  //! <Type Public="true" Name="_steps"/>
	  (
	    wait4start,
	    wait4light,
	    wait4time
	  )$UDINT;
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	ssw 	: SvrCh__steps_PTofCls_class0;
	counter 	: SvrCh_DINT;
	hmiStart 	: SvrCh_DINT;
	hmiLight 	: SvrCh_DINT;
  //Clients:
	MTR 	: CltCh_DINT;
	StartBTN 	: CltCh_DINT;
	lightbarrier 	: CltCh_DINT;
	CYL 	: CltCh_DINT;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB class0::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_CLASS0
0$UINT, 0$UINT, (SIZEOF(::class0))$UINT, 
5$UINT, 4$UINT, 0$UINT, 
TO_UDINT(1594949027), "class0", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::class0.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::class0.ssw.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4112679739), "ssw", 
(::class0.counter.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4268190306), "counter", 
(::class0.hmiStart.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1021192462), "hmiStart", 
(::class0.hmiLight.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3367837814), "hmiLight", 
//Clients:
(::class0.MTR.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3702615817), "MTR", 
(::class0.StartBTN.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2533660182), "StartBTN", 
(::class0.lightbarrier.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1755217986), "lightbarrier", 
(::class0.CYL.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2576220461), "CYL", 
END_FUNCTION


#define USER_CNT_class0 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_class0] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION class0::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_class0, pCmd := #vmt.CmdTable);
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ssw.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ssw.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	counter.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF counter.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	hmiStart.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF hmiStart.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	hmiLight.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF hmiLight.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL class0::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  
  StartBTN := StartBTN.Read();
  lightbarrier := lightbarrier.Read();
  
  
  case ssw of
  
  wait4start:
  
    if StartBTN = 1 then
      MTR := 1;
      ssw := wait4light;
    end_if;

  
  wait4light:
    
    if lightbarrier = 1 then
      MTR := 0;
      CYL := 1;
      ssw := wait4time;
    end_if;
      
  wait4time:
     
     if counter = 700 then
      CYL := 0;
      counter := 0;
      ssw := wait4start;
     else
      counter += 1;
     end_if;
      
  end_case;

  
  MTR.Write (MTR);
  CYL.Write (CYL);
  
	state := READY;

END_FUNCTION
