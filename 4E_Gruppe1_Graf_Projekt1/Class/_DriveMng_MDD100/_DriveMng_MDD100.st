//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "_DriveMng_MDD100"
	Revision           = "1.54"
	GUID               = "{C677CAA4-57BA-4EAC-AEBC-8FF1A4FF48EF}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "10 ms"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\_DriveMngBase\Drive.ico"
	SharedCommandTable = "true"
	Objectsize         = "(586,120)"
	Comment            = "manages the whole varancommunication between&#13;&#10;the Drive and the application">
	<Channels>
		<Server Name="CRC_ErrorCounter" GUID="{0597017D-CFFE-4EED-9DCF-C50DE5A2EB10}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="counts the CRC errors of all axis"/>
		<Server Name="FwDate" GUID="{9514C42D-F286-4920-AB8D-28E058708458}" Class="VirtualBaseInit" Visualized="false" Initialize="true" WriteProtected="true" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="FWVersion" GUID="{FD446A54-B4DB-417A-830B-2FBBC123E3FA}" Class="VirtualBaseInit" Visualized="false" Initialize="true" WriteProtected="true" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="Input1" GUID="{FB54E1C2-7CDD-4D81-97BD-0FAB71E2CD01}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="State of digital input 1 of drive&#13;&#10;&#13;&#10;-1..input information not available&#13;&#10; 0..input is low&#13;&#10; 1..input is high"/>
		<Server Name="Input2" GUID="{6C876543-88F5-47BF-82E9-0846ED7201B9}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="State of digital input 2 of drive&#13;&#10;&#13;&#10;-1..input information not available&#13;&#10; 0..input is low&#13;&#10; 1..input is high"/>
		<Server Name="Input3" GUID="{47073A5B-5985-4576-95EF-5BB2C1FB3BE4}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="State of digital input 3 of drive&#13;&#10;&#13;&#10;-1..input information not available&#13;&#10; 0..input is low&#13;&#10; 1..input is high"/>
		<Server Name="Input4" GUID="{06803E5D-99BA-44EF-AE36-2C8366A9381F}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="State of digital input 4 of drive&#13;&#10;&#13;&#10;-1..input information not available&#13;&#10; 0..input is low&#13;&#10; 1..input is high"/>
		<Server Name="Input5" GUID="{81211376-5601-44E1-9254-12D1AC5B2BFF}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="State of digital input 5 of drive&#13;&#10;&#13;&#10;-1..input information not available&#13;&#10; 0..input is low&#13;&#10; 1..input is high"/>
		<Server Name="Input6" GUID="{E796BEF0-E4C0-4BA5-A64E-3A43E1F708D3}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="State of digital input 6 of drive&#13;&#10;&#13;&#10;-1..input information not available&#13;&#10; 0..input is low&#13;&#10; 1..input is high"/>
		<Server Name="Input7" GUID="{0012CA06-D3AE-4CEC-AC92-2DE2E4F2D9DB}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="State of digital input 7 of drive&#13;&#10;&#13;&#10;-1..input information not available&#13;&#10; 0..input is low&#13;&#10; 1..input is high"/>
		<Server Name="Input8" GUID="{A86F4175-12E9-4CF9-9C7D-0BB2D1665BB1}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="State of digital input 8 of drive&#13;&#10;&#13;&#10;-1..input information not available&#13;&#10; 0..input is low&#13;&#10; 1..input is high"/>
		<Server Name="ValidateSerNo" GUID="{E7503AB0-BF1C-4ABE-9FBC-42B1BF7891D6}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="if the validation of the serial number is activated (SerNoValidation = 1)&#13;&#10;the serial number of the actual module can be validated by writing to this server&#13;&#10;&#13;&#10;this server shows also the state of validation:&#13;&#10;-2..validation not acivated&#13;&#10;-1..no module validated on this position&#13;&#10; 0..module is not the validated one&#13;&#10; 1..module is the validated one"/>
		<Server Name="VaranOut_1" GUID="{983EA63F-243F-4389-81CA-B91AA616847E}" Class="Hub_Base" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="VaranOut"/>
		<Client Name="FetchDigitalInputs" Required="false" Internal="false" Comment="Client is set as init value.&#13;&#10;a value &lt;&gt; 0 means the digital inputs of the drive are fetched synchronously and displayed on the Servers Input1 to Input8&#13;&#10;If the function is active an additional VARAN object is used"/>
		<Client Name="FWDateString" Required="true" Internal="true"/>
		<Client Name="FWNumSTring" Required="true" Internal="true"/>
		<Client Name="Required" Required="true" Internal="false" Comment="0=module is not required, 1=module is required "/>
		<Client Name="SerNoValidation" Required="false" Internal="false" Comment="0..serial number of varan client does not matter&#13;&#10;1..serial number of varan client has to be validated, to use the module&#13;&#10;&#13;&#10;validation is done via write(1) to the ValidateSerNo Server"/>
		<Client Name="Transparent" Required="false" Internal="false" DefValue="0" Comment="If this Client is set to 1 the module is not used for building the VARAN-Tree"/>
		<Client Name="UserAction" Required="false" Internal="false" Comment="optional, connect to server to get Varan states (connect,disconnect,interrupt)"/>
		<Client Name="VaranDriveBase" Required="true" Internal="true"/>
		<Client Name="VaranIn" Required="true" Internal="false" Comment="Connect with a Varan Communication Class"/>
		<Client Name="VaranTimeMultiplier" Required="false" Internal="false" Comment="multiplier of varan time set as init value."/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="WalRob"/>
		<Dokumentation Revision="1.54" Date="25.08.2015" Author="EisMic" Company="Sigmatek" Description="DataObjects are now installed in UpdateCy and are added to DOList in UpdateRt if the OS supports the new interface method. Version 16#1003 or higher of the pMultiVaran-Interface is needed to use this feature."/>
		<Dokumentation Revision="1.53" Date="18.06.2015" Author="PieSte" Company="Sigmatek" Description="Add newinst command to call methode DisableDevice() and EnableDevice() to avoid retrys when hw disconnected.&#13;&#10;Corrected function Varan_HwDisconnect() to set dataobjects off."/>
		<Dokumentation Revision="1.52" Date="26.05.2015" Author="RamAnd" Company="Sigmatek" Description="Added possibility to get enabled Axis which is needed to set absolute position of axis."/>
		<Dokumentation Revision="1.51" Date="16.04.2015" Author="PieSte&#13;&#10;LanSte&#13;&#10;PieSte" Company="Sigmatek" Description="Added support for visualisation in graphical hardware editor.&#13;&#10;Added support for calculating resources for graphical hardware editor.&#13;&#10;Add new parameter to read drive scope faster. It is used for SDD1X00 drives."/>
		<Dokumentation Revision="1.50" Date="24.03.2015" Author="EisMic" Company="Sigmatek" Description="Check pointer p_NodeInfo for validity in method GetRetryTimeout due to access exception error if method Varan_HWDisconnect is called and no hardware was available."/>
		<Dokumentation Revision="1.49" Date="06.03.2015" Author="PieSte" Company="Sigmatek" Description="Changed commands for businterface to be compatible with new drive hardware.&#13;&#10;Changed visual state of FwNumString and FwDateString object for lse displaying."/>
		<Dokumentation Revision="1.48" Date="27.01.2015" Author="EisMic" Company="Sigmatek" Description="Implemented commando for lasal 2 to get serial number of drive."/>
		<Dokumentation Revision="1.47" Date="13.08.2014" Author="LanSte" Company="Sigmatek" Description="Corrected reading Firmwareversion with newinst cmd: CMD_GET_HARDWARE_DIAGNOSE "/>
		<Dokumentation Revision="1.46" Date="30.07.2014" Author="RamAnd" Company="Sigmatek" Description="Loop to check for retries could have caused a crash, if the drive wasn&apos;t initialized so far."/>
		<Dokumentation Revision="1.45" Date="25.07.2014" Author="LanSte&#13;&#10;PieSte" Company="Sigmatek" Description="Added Support for reading hardware diagnose and hardwaretree entry.&#13;&#10;Corrected internal call of GetParameterState in baseclass _DriveMngBase."/>
		<Dokumentation Revision="1.44" Date="04.07.2014" Author="PieSte" Company="Sigmatek" Description="Saved client FetchDigitalInputs to TempFetchDigitalInputs in baseclass to avoid an access exception if it is changed during run."/>
		<Dokumentation Revision="1.43" Date="07.05.2014" Author="EisMic" Company="Sigmatek" Description="Added missing servers in lhd file and corrected the type of servers."/>
		<Dokumentation Revision="1.42" Date="07.05.2014" Author="LanSte" Company="Sigmatek" Description="Improved Transparent property description in HW-Tree and activated greying out of the object in the HW-Tree.&#13;&#10;Minimized the interface request via CILGET by useing private pointers to reduce time in init."/>
		<Dokumentation Revision="1.41" Date="06.03.2014" Author="RamAnd" Company="Sigmatek" Description="Changed offset of SyncOut 1 (62,5µs) to be synchron with the SyncOut 0 to prevent inconsistent data in the drive firmware."/>
		<Dokumentation Revision="1.40" Date="12.02.2014" Author="ZoePat&#13;&#10;ZoePat" Company="Sigmatek" Description="Added new NewInst comando for Lasal2 to get the list of axis.&#13;&#10;ExtendedAxis for Axis2 of SDD210 and SDD215 din&apos;t work."/>
		<Dokumentation Revision="1.30" Date="20.01.2014" Author="RamAnd&#13;&#10;&#13;&#10;PieSte" Company="Sigmatek" Description="Success of GetSyncParameter and SetSyncParameter couldn&apos;t be ensured because the return value wasn&apos;t initialized if the method succeeds.&#13;&#10;Add TaskDelay 15ms in _VaranDriveBase Varan_HwConnect to initialize the Hardware."/>
		<Dokumentation Revision="1.20" Date="05.12.2013" Author="LanSte" Company="Sigmatek" Description="Added payload support"/>
		<Dokumentation Revision="1.10" Date="05.11.2012" Author="RamAnd" Company="Sigmatek" Description="Content of corresponding LASAL Hardware Description file (.lhd) which is necessary for the hardware editor has been updated"/>
		<Dokumentation Revision="1.8" Date="02.11.2011" Author="SvePau" Company="Sigmatek" Description="Changed comment of the Client &quot;FetchDigitalInputs&quot; and added possibility to set it via HW-Editor"/>
		<Dokumentation Revision="1.7" Date="05.08.2011" Author="PibPet" Company="Sigmatek" Description="Input Server changed Visulized to TRUE SA:19236"/>
		<Dokumentation Revision="1.6" Date="28.06.2011" Author="BleErn" Company="Sigmatek" Description="Content of corresponding LASAL Hardware Description file (.lhd) which is necessary for the hardware editor has been updated"/>
		<Dokumentation Revision="1.5" Date="15.06.2011" Author="Ramand" Company="Sigmatek" Description="Client Transparent has to be not required, as it is a new feature."/>
		<Dokumentation Revision="1.4" Date="31.05.2011" Author="RamAnd" Company="Sigmatek" Description="Added possibility to read out the digital inputs of the drive synchronously."/>
		<Dokumentation Revision="1.3" Date="18.05.2011" Author="RamAnd" Company="Sigmatek" Description="After the Online-Server changed to 1, it was possible that the synchron values (like actual position) took 1 more realtime cycle to be shown by the class."/>
		<Dokumentation Revision="1.2" Date="20.04.2011" Author="SvePau" Company="Sigmatek" Description="Connected server ValidateSerNo from baseclass to derivation"/>
		<Dokumentation Revision="1.1" Date="13.04.2011" Author="BleErn" Company="Sigmatek" Description="Added Client Transparent that allows to disable a VARAN-HW-Class"/>
		<Dokumentation Revision="1.0" Date="09.02.2011" Author="WalRob" Company="Sigmatek" Description="Initial version"/>
	</RevDoku>
	<Network Name="_DriveMng_MDD100">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{49F99B4B-ACA4-451B-A6DA-380119A66980}"
				Class      = "_DriveMngBase"
				Position   = "(1816,120)"
				Visualized = "false">
				<Channels>
					<Server Name="AxisAvailable"/>
					<Server Name="CmdState"/>
					<Server Name="DeviceAddress"/>
					<Server Name="DeviceID"/>
					<Server Name="DriveType"/>
					<Server Name="HWVersion"/>
					<Server Name="Online"/>
					<Server Name="Release"/>
					<Server Name="RetryCounter"/>
					<Server Name="SerialNo"/>
					<Server Name="VendorID"/>
					<Client Name="cOnline"/>
					<Client Name="coStdLib"/>
					<Client Name="FwDatetr"/>
					<Client Name="FwNumStr"/>
					<Client Name="To_TaskObjectControl"/>
					<Client Name="ToBusIF"/>
					<Client Name="toVaran"/>
				</Channels>
			</Object>
			<Object
				Name       = "FWDateString"
				GUID       = "{227F70C7-F001-4715-AAC1-ABEC4C6C79BE}"
				Class      = "String"
				Position   = "(1170,450)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "FWNumSTring"
				GUID       = "{89017E6F-B1BE-49B6-815E-AC1DA707E598}"
				Class      = "String"
				Position   = "(1170,300)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "VaranDriveBase"
				GUID       = "{81FB6BA1-E2FC-4451-B822-A08D27FCAC0F}"
				Class      = "_VaranDriveBase"
				Position   = "(450,120)"
				Visualized = "false">
				<Channels>
					<Server Name="CRC_ErrorCounter"/>
					<Server Name="DeviceAddress"/>
					<Server Name="DeviceID"/>
					<Server Name="Input1"/>
					<Server Name="Input2"/>
					<Server Name="Input3"/>
					<Server Name="Input4"/>
					<Server Name="Input5"/>
					<Server Name="Input6"/>
					<Server Name="Input7"/>
					<Server Name="Input8"/>
					<Server Name="Online"/>
					<Server Name="Release"/>
					<Server Name="RetryCounter"/>
					<Server Name="SerialNo"/>
					<Server Name="State"/>
					<Server Name="Synchron"/>
					<Server Name="ValidateSerNo"/>
					<Server Name="VaranOut_1"/>
					<Server Name="VendorID"/>
					<Client Name="FetchDigitalInputs" Value="0"/>
					<Client Name="Required" Value="1"/>
					<Client Name="SerNoValidation"/>
					<Client Name="Transparent" Value="0"/>
					<Client Name="UserAction"/>
					<Client Name="VaranIn"/>
					<Client Name="VaranTimeMultiplier"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.CmdState" Destination="_base.CmdState" Vertices="(2478,210),(2306,210),"/>
			<Connection Source="VaranDriveBase.VaranIn" Destination="this.VaranIn" Vertices="(450,210),(120,210),(120,810),(38,810),"/>
			<Connection Source="VaranDriveBase.Required" Destination="this.Required" Vertices="(450,270),(180,270),(180,870),(38,870),"/>
			<Connection Source="this.VaranDriveBase" Destination="VaranDriveBase.State"/>
			<Connection Source="VaranDriveBase.VaranTimeMultiplier" Destination="this.VaranTimeMultiplier" Vertices="(450,510),(300,510),(300,1110),(38,1110),"/>
			<Connection Source="VaranDriveBase.UserAction" Destination="this.UserAction" Vertices="(450,330),(210,330),(210,930),(38,930),"/>
			<Connection Source="_base.toVaran" Destination="VaranDriveBase.State" Vertices="(1816,210),(1050,210),"/>
			<Connection Source="_base.cOnline" Destination="VaranDriveBase.Online" Vertices="(1816,270),(1050,270),"/>
			<Connection Source="this.Online" Destination="_base.Online" Vertices="(2478,270),(2306,270),"/>
			<Connection Source="this.Release" Destination="_base.Release" Vertices="(2478,330),(2306,330),"/>
			<Connection Source="this.DriveType" Destination="_base.DriveType" Vertices="(2478,630),(2306,630),"/>
			<Connection Source="this.DeviceAddress" Destination="_base.DeviceAddress" Vertices="(2478,390),(2306,390),"/>
			<Connection Source="this.VendorID" Destination="_base.VendorID" Vertices="(2478,450),(2306,450),"/>
			<Connection Source="this.DeviceID" Destination="_base.DeviceID" Vertices="(2478,510),(2306,510),"/>
			<Connection Source="this.RetryCounter" Destination="_base.RetryCounter" Vertices="(2478,570),(2306,570),"/>
			<Connection Source="this.SerialNo" Destination="_base.SerialNo" Vertices="(2478,690),(2340,690),(2306,750),"/>
			<Connection Source="_base.FwDatetr" Destination="FWDateString.Data" Vertices="(1816,390),(1710,390),(1710,450),(1710,540),(1486,540),"/>
			<Connection Source="this.HWVersion" Destination="_base.HWVersion" Vertices="(2478,750),(2340,750),(2306,810),"/>
			<Connection Source="this.CRC_ErrorCounter" Destination="VaranDriveBase.CRC_ErrorCounter" Vertices="(2478,990),(1170,990),(1170,750),(1050,750),"/>
			<Connection Source="this.VaranOut_1" Destination="VaranDriveBase.VaranOut_1" Vertices="(2478,1530),(1110,1530),(1110,1350),(1050,1350),"/>
			<Connection Source="this.FWNumSTring" Destination="FWNumSTring.Data"/>
			<Connection Source="this.FWDateString" Destination="FWDateString.Data"/>
			<Connection Source="this.FwDate" Destination="FWDateString.Data" Vertices="(2478,870),(2340,870),(2310,900),(1530,900),(1530,540),(1486,540),"/>
			<Connection Source="_base.FwNumStr" Destination="FWNumSTring.Data" Vertices="(1816,330),(1560,330),(1560,390),(1486,390),"/>
			<Connection Source="this.FWVersion" Destination="FWNumSTring.Data" Vertices="(2478,810),(2340,810),(2310,870),(1560,870),(1560,390),(1486,390),"/>
			<Connection Source="VaranDriveBase.SerNoValidation" Destination="this.SerNoValidation" Vertices="(450,390),(240,390),(240,990),(38,990),"/>
			<Connection Source="VaranDriveBase.Transparent" Destination="this.Transparent" Vertices="(450,450),(270,450),(270,1050),(38,1050),"/>
			<Connection Source="this.ValidateSerNo" Destination="VaranDriveBase.ValidateSerNo" Vertices="(2478,930),(1200,930),(1200,690),(1050,690),"/>
			<Connection Source="VaranDriveBase.FetchDigitalInputs" Destination="this.FetchDigitalInputs" Vertices="(450,570),(330,570),(330,1170),(38,1170),"/>
			<Connection Source="this.Input1" Destination="VaranDriveBase.Input1" Vertices="(2478,1050),(1140,1050),(1140,870),(1050,870),"/>
			<Connection Source="this.Input2" Destination="VaranDriveBase.Input2" Vertices="(2478,1110),(1140,1110),(1140,930),(1050,930),"/>
			<Connection Source="this.Input3" Destination="VaranDriveBase.Input3" Vertices="(2478,1170),(1140,1170),(1140,990),(1050,990),"/>
			<Connection Source="this.Input4" Destination="VaranDriveBase.Input4" Vertices="(2478,1230),(1140,1230),(1140,1050),(1050,1050),"/>
			<Connection Source="this.Input5" Destination="VaranDriveBase.Input5" Vertices="(2478,1290),(1140,1290),(1140,1110),(1050,1110),"/>
			<Connection Source="this.Input6" Destination="VaranDriveBase.Input6" Vertices="(2478,1350),(1140,1350),(1140,1170),(1050,1170),"/>
			<Connection Source="this.Input7" Destination="VaranDriveBase.Input7" Vertices="(2478,1410),(1140,1410),(1140,1230),(1050,1230),"/>
			<Connection Source="this.Input8" Destination="VaranDriveBase.Input8" Vertices="(2478,1470),(1140,1470),(1140,1290),(1050,1290),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _DriveMngBase

_DriveMng_MDD100 : CLASS
: _DriveMngBase
  //Servers:
	FWVersion 	: SvrChCmd_UDINT;
	FwDate 	: SvrChCmd_UDINT;
	ValidateSerNo 	: SvrCh_DINT;
	CRC_ErrorCounter 	: SvrCh_DINT;
	Input1 	: SvrCh_DINT;
	Input2 	: SvrCh_DINT;
	Input3 	: SvrCh_DINT;
	Input4 	: SvrCh_DINT;
	Input5 	: SvrCh_DINT;
	Input6 	: SvrCh_DINT;
	Input7 	: SvrCh_DINT;
	Input8 	: SvrCh_DINT;
	VaranOut_1 	: SvrChCmd_DINT;
  //Clients:
	VaranIn 	: CltChCmd_Hub_Base;
	Required 	: CltCh_DINT;
	UserAction 	: CltCh_DINT;
	SerNoValidation 	: CltCh_DINT;
	Transparent 	: CltCh_DINT;
	VaranTimeMultiplier 	: CltCh_UDINT;
	FWDateString 	: CltChCmd_String;
	FWNumSTring 	: CltChCmd_String;
	VaranDriveBase 	: CltChCmd__VaranDriveBase;
	FetchDigitalInputs 	: CltCh_DINT;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GetBusDeviceID
		VAR_OUTPUT
			output 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GetDrvDeviceID
		VAR_OUTPUT
			output 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL CRC_ErrorCounter::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input1::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input2::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input3::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input4::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input5::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input6::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input7::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input8::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL VaranOut_1::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using _VaranDriveBase
#pragma using String
#pragma usingLtd Hub_Base


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _DriveMng_MDD100::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__DRIVEMNG_MDD100
1$UINT, 54$UINT, (SIZEOF(::_DriveMng_MDD100))$UINT, 
13$UINT, 10$UINT, 0$UINT, 
TO_UDINT(1066369953), "_DriveMng_MDD100", //Class
TO_UDINT(496739206), "_DriveMngBase", 1$UINT, 39$UINT, //Baseclass
//Servers:
(::_DriveMng_MDD100.FWVersion.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(156722779), "FWVersion", 
(::_DriveMng_MDD100.FwDate.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(1606377179), "FwDate", 
(::_DriveMng_MDD100.ValidateSerNo.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1774120368), "ValidateSerNo", 
(::_DriveMng_MDD100.CRC_ErrorCounter.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2665485201), "CRC_ErrorCounter", 
(::_DriveMng_MDD100.Input1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1344628668), "Input1", 
(::_DriveMng_MDD100.Input2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3375117830), "Input2", 
(::_DriveMng_MDD100.Input3.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3190490768), "Input3", 
(::_DriveMng_MDD100.Input4.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(542085939), "Input4", 
(::_DriveMng_MDD100.Input5.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1464378277), "Input5", 
(::_DriveMng_MDD100.Input6.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3460428319), "Input6", 
(::_DriveMng_MDD100.Input7.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3108422281), "Input7", 
(::_DriveMng_MDD100.Input8.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(704241432), "Input8", 
(::_DriveMng_MDD100.VaranOut_1.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(2138873746), "VaranOut_1", 
//Clients:
(::_DriveMng_MDD100.VaranIn.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000110$UINT, TO_UDINT(2999796184), "VaranIn", TO_UDINT(3238133653), "Hub_Base", 1$UINT, 20$UINT, 
(::_DriveMng_MDD100.Required.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000110$UINT, TO_UDINT(648558917), "Required", 
(::_DriveMng_MDD100.UserAction.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(615089769), "UserAction", 
(::_DriveMng_MDD100.SerNoValidation.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(2258645482), "SerNoValidation", 
(::_DriveMng_MDD100.Transparent.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(2239134692), "Transparent", 
(::_DriveMng_MDD100.VaranTimeMultiplier.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(873970582), "VaranTimeMultiplier", 
(::_DriveMng_MDD100.FWDateString.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3010322216), "FWDateString", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::_DriveMng_MDD100.FWNumSTring.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(4286323315), "FWNumSTring", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::_DriveMng_MDD100.VaranDriveBase.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(4057195117), "VaranDriveBase", TO_UDINT(766164962), "_VaranDriveBase", 1$UINT, 58$UINT, 
(::_DriveMng_MDD100.FetchDigitalInputs.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(2304224197), "FetchDigitalInputs", 
END_FUNCTION


#define USER_CNT__DriveMng_MDD100 5

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__DriveMng_MDD100] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _DriveMng_MDD100::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _DriveMngBase::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _DriveMngBase::CmdState.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _DriveMngBase::CmdState.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT__DriveMng_MDD100;
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #GetBusDeviceID();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #GetDrvDeviceID();

#pragma warning (default : 74)
	_DriveMngBase::CmdState.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _DriveMngBase::CmdState.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, FWVersion.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	FWVersion.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF FWVersion.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, FwDate.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	FwDate.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF FwDate.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ValidateSerNo.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ValidateSerNo.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	CRC_ErrorCounter.pMeth			:= StoreMethod( #CRC_ErrorCounter::Read(), #M_NO_F() );
	IF CRC_ErrorCounter.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input1.pMeth			:= StoreMethod( #Input1::Read(), #M_NO_F() );
	IF Input1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input2.pMeth			:= StoreMethod( #Input2::Read(), #M_NO_F() );
	IF Input2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input3.pMeth			:= StoreMethod( #Input3::Read(), #M_NO_F() );
	IF Input3.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input4.pMeth			:= StoreMethod( #Input4::Read(), #M_NO_F() );
	IF Input4.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input5.pMeth			:= StoreMethod( #Input5::Read(), #M_NO_F() );
	IF Input5.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input6.pMeth			:= StoreMethod( #Input6::Read(), #M_NO_F() );
	IF Input6.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input7.pMeth			:= StoreMethod( #Input7::Read(), #M_NO_F() );
	IF Input7.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input8.pMeth			:= StoreMethod( #Input8::Read(), #M_NO_F() );
	IF Input8.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, VaranOut_1.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #VaranOut_1::Read();
	VaranOut_1.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF VaranOut_1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
FUNCTION VIRTUAL GLOBAL _DriveMng_MDD100::CRC_ErrorCounter::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	CRC_ErrorCounter := VaranDriveBase.CRC_ErrorCounter.Read();
	output := CRC_ErrorCounter;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DriveMng_MDD100::VaranOut_1::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	VaranOut_1 := VaranDriveBase.VaranOut_1.Read();
	output := VaranOut_1;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DriveMng_MDD100::Input1::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	Input1 := VaranDriveBase.Input1.Read();
	output := Input1;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DriveMng_MDD100::Input2::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	Input2 := VaranDriveBase.Input2.Read();
	output := Input2;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DriveMng_MDD100::Input3::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	Input3 := VaranDriveBase.Input3.Read();
	output := Input3;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DriveMng_MDD100::Input4::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	Input4 := VaranDriveBase.Input4.Read();
	output := Input4;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DriveMng_MDD100::Input5::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	Input5 := VaranDriveBase.Input5.Read();
	output := Input5;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DriveMng_MDD100::Input6::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	Input6 := VaranDriveBase.Input6.Read();
	output := Input6;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DriveMng_MDD100::Input7::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	Input7 := VaranDriveBase.Input7.Read();
	output := Input7;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _DriveMng_MDD100::Input8::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	Input8 := VaranDriveBase.Input8.Read();
	output := Input8;

END_FUNCTION

FUNCTION VIRTUAL _DriveMng_MDD100::GetBusDeviceID
	VAR_OUTPUT
		output 	: UDINT;
	END_VAR

  output := DRIVEMNG_BUSDEVICEID_MDD;
  
END_FUNCTION


FUNCTION VIRTUAL _DriveMng_MDD100::GetDrvDeviceID
	VAR_OUTPUT
		output 	: UDINT;
	END_VAR
  
  output := DRIVEMNG_DRVDEVICEID_MDD121;

END_FUNCTION
