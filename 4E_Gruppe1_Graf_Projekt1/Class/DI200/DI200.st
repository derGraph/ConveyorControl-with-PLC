//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
#define DEVICE_ID_DI200 1001
//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "DI200"
	Revision           = "1.36"
	GUID               = "{0BC54076-C36C-41BF-BC83-6425BBFED374}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\s-dias.ico"
	SharedCommandTable = "true"
	Objectsize         = "(398,120)"
	Comment            = "This hardware class is used to control the DI200 hardware module with 20 digital inputs.">
	<Channels>
		<Server Name="Input1" GUID="{61697DFE-4D2E-44DE-86B7-5816E6C34E01}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 1 value"/>
		<Server Name="Input10" GUID="{9A9A8EA9-F71B-4279-8635-3971D1814F62}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 10 value"/>
		<Server Name="Input11" GUID="{493738D4-475B-49A0-A086-A4809D17A802}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 11 value"/>
		<Server Name="Input12" GUID="{13AB4020-B2EB-4B21-AA6D-AEBF64F49CB3}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 12 value"/>
		<Server Name="Input13" GUID="{7561D9D6-7C74-4E63-BDDD-FE6ED549D6C7}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 13 value"/>
		<Server Name="Input14" GUID="{88DF0AD1-E225-47BC-AD24-27D1C5F2166A}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 14 value"/>
		<Server Name="Input15" GUID="{3F8AD251-E2F4-429D-9EF7-362B2F53722C}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 15 value"/>
		<Server Name="Input16" GUID="{AD7A70F1-AF76-4DDE-92B2-4CF2947C7E14}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 16 value"/>
		<Server Name="Input17" GUID="{96AB4ED3-F7A8-40A5-A5D3-3C4D3C7EA4D7}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 17 value"/>
		<Server Name="Input18" GUID="{0FD08D80-9A3E-44C4-93E2-ED21D0868534}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 18 value"/>
		<Server Name="Input19" GUID="{1F1DCFF1-B6B1-46B6-9126-D5CA296A9289}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 19 value"/>
		<Server Name="Input2" GUID="{FE784442-F0C9-461D-9D2E-417AB7C23D6F}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 2 value"/>
		<Server Name="Input20" GUID="{3E2E831C-0244-48D5-AE39-E0054F5F2171}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 20 value"/>
		<Server Name="Input3" GUID="{5BD5C5AC-F8A4-4215-A81F-5BEF4D8ABA29}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 3 value"/>
		<Server Name="Input4" GUID="{0046F47D-0832-457B-A388-97261F0ADEFF}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 4 value"/>
		<Server Name="Input5" GUID="{8ECA112D-5F91-40C3-90CD-2BA7BCE28A96}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 5 value"/>
		<Server Name="Input6" GUID="{94DB8C09-A91F-4326-BF09-97CE595633E6}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 6 value"/>
		<Server Name="Input7" GUID="{E93469CC-0C8E-4FB9-9F77-EF81E6DE1510}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 7 value"/>
		<Server Name="Input8" GUID="{DE393446-B08E-4042-9FA8-C6976D0A2A12}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 8 value"/>
		<Server Name="Input9" GUID="{04882CEE-B6B8-496A-9F67-B6DE1F39FDAB}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 9 value"/>
		<Server Name="InputDouble" GUID="{0A6E9B3E-AE33-4D3B-893B-08C68844DF71}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Bit 0 to 19 ... Input 1 to 20"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="BeiWol"/>
		<Dokumentation Revision="1.36" Date="17.06.2015" Author="EisMic" Company="Sigmatek" Description="The servers FPGAVersion, SerialNo, Device ID and status and input servers are now not reset anymore when the module is disconnected."/>
		<Dokumentation Revision="1.35" Date="16.04.2015" Author="EisMic&#13;&#10;LanSte" Company="Sigmatek" Description="Added support for visualisation in graphical hardware editor.&#13;&#10;Added support for calculating resources for graphical hardware editor."/>
		<Dokumentation Revision="1.34" Date="17.03.2015" Author="RamAnd" Company="Sigmatek" Description="Added HW Version for sdias clients."/>
		<Dokumentation Revision="1.33" Date="11.02.2015" Author="PieSte" Company="Sigmatek" Description="Corrected read spi data for hardwaretree in methode GetSPIDataFromID from baseclass."/>
		<Dokumentation Revision="1.32" Date="18.11.2014" Author="PieSte" Company="Sigmatek" Description="Added possibility  to read more data from spi flash then one sdo access.&#13;&#10;Set methode GetDeviceID to global.&#13;&#10;Add methode to calculate checksum of spi flash."/>
		<Dokumentation Revision="1.31" Date="04.07.2014" Author="EisMic" Company="Sigmatek" Description="Added support for reading hardware diagnosis and hardwaretree entry."/>
		<Dokumentation Revision="1.30" Date="20.01.2014" Author="PieSte" Company="Sigmatek" Description="Read Client Required and Place in Init SdiasBase"/>
		<Dokumentation Revision="1.20" Date="05.12.2013" Author="RamAnd" Company="Sigmatek" Description="Changed login mechanism to sdias manager class to be independent of bus accesses."/>
		<Dokumentation Revision="1.10" Date="01.08.2013" Author="ObeChr" Company="Sigmatek" Description="Modified Clients / Server / Comments&#13;&#10;The class now also shows the FPGA Version on a new Server.&#13;&#10;In the first realtime cycles the classes showed _ClassOk, but there was no actual IO information. Now the ClassState of SDIAS Clients is stored temporary during init and shown at the server after init."/>
		<Dokumentation Revision="1.0" Date="18.07.2013" Author="RamAnd" Company="Sigmatek" Description="First library version"/>
	</RevDoku>
	<Network Name="DI200">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{217F4685-D665-4B7A-9E45-A9558B48283B}"
				Class      = "SdiasBase"
				Position   = "(218,120)"
				Visualized = "true">
				<Channels>
					<Server Name="ClassState"/>
					<Server Name="DeviceID"/>
					<Server Name="FPGAVersion"/>
					<Server Name="HwVersion"/>
					<Server Name="LEDControl" Value="0"/>
					<Server Name="RetryCounter"/>
					<Server Name="SDOState"/>
					<Server Name="SerialNo"/>
					<Client Name="Place" Value="0"/>
					<Client Name="Required" Value="1"/>
					<Client Name="SdiasIn"/>
					<Client Name="ToStdLib"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassState" Destination="_base.ClassState" Vertices="(804,210),(632,210),"/>
			<Connection Source="this.DeviceID" Destination="_base.DeviceID" Vertices="(804,270),(632,270),"/>
			<Connection Source="this.SerialNo" Destination="_base.SerialNo" Vertices="(804,450),(632,450),"/>
			<Connection Source="this.RetryCounter" Destination="_base.RetryCounter" Vertices="(804,510),(632,510),"/>
			<Connection Source="_base.SdiasIn" Destination="this.SdiasIn" Vertices="(218,210),(38,210),"/>
			<Connection Source="_base.Place" Destination="this.Place" Vertices="(218,270),(38,270),"/>
			<Connection Source="_base.Required" Destination="this.Required" Vertices="(218,330),(38,330),"/>
			<Connection Source="this.LEDControl" Destination="_base.LEDControl" Vertices="(804,570),(632,570),"/>
			<Connection Source="this.FPGAVersion" Destination="_base.FPGAVersion" Vertices="(804,330),(632,330),"/>
			<Connection Source="this.HwVersion" Destination="_base.HwVersion" Vertices="(804,390),(632,390),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using SdiasBase

DI200 : CLASS
: SdiasBase
  //Servers:
	Input1 	: SvrCh_DINT;
	Input2 	: SvrCh_DINT;
	Input3 	: SvrCh_DINT;
	Input4 	: SvrCh_DINT;
	Input5 	: SvrCh_DINT;
	Input6 	: SvrCh_DINT;
	Input7 	: SvrCh_DINT;
	Input8 	: SvrCh_DINT;
	Input9 	: SvrCh_DINT;
	Input10 	: SvrCh_DINT;
	Input11 	: SvrCh_DINT;
	Input12 	: SvrCh_DINT;
	Input13 	: SvrCh_DINT;
	Input14 	: SvrCh_DINT;
	Input15 	: SvrCh_DINT;
	Input16 	: SvrCh_DINT;
	Input17 	: SvrCh_DINT;
	Input18 	: SvrCh_DINT;
	Input19 	: SvrCh_DINT;
	Input20 	: SvrCh_DINT;
	InputDouble 	: SvrCh_BDINT;
  //Clients:
  //Variables:
		pReadData 	: ^DINT;
  //Functions:
				//! <Function Comment="Realtime Update Methode which runs in PreScan." Name="UpdateRt"/>
	FUNCTION VIRTUAL GLOBAL UpdateRt;
				//! <Function Comment="Methode is called if this Module gets connected." Name="ConnectEvent"/>
	FUNCTION VIRTUAL GLOBAL ConnectEvent;
				//! <Function Comment="Methode is called if this Module gets disconnected." Name="DisconnectEvent"/>
	FUNCTION VIRTUAL GLOBAL DisconnectEvent;
				//! <Function Comment="This Methode should is used, to check the DeviceID of the Module." Name="CheckDeviceID"/>
	FUNCTION VIRTUAL GLOBAL CheckDeviceID
		VAR_INPUT
			udID2Check 	: UDINT;			//! <Variable Comment="Device ID of connected Module." Name="CheckDeviceID.udID2Check"/>
		END_VAR
		VAR_OUTPUT
			bIsOK 	: BOOL;			//! <Variable Comment="FALSE = Wrong DeviceID for Module&#13;&#10;TRUE  = DeviceID of Module is correct" Name="CheckDeviceID.bIsOK"/>
		END_VAR;
	
	FUNCTION VIRTUAL GetTaskCfg
		VAR_OUTPUT
			TaskCfg 	: BDINT;			//! <Variable Comment="Select which tasks will be available for this module:&#13;&#10;Bit0..Realtime PreScan&#13;&#10;Bit1..Realtime PostScan&#13;&#10;Bit2..Cyclic&#13;&#10;&#13;&#10;e.g. if only realtime postscan is needed:&#13;&#10;2#010" Name="GetTaskCfg.TaskCfg"/>
		END_VAR;
	
	FUNCTION VIRTUAL GetDeviceID
		VAR_OUTPUT
			output 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB DI200::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_DI200
1$UINT, 36$UINT, (SIZEOF(::DI200))$UINT, 
21$UINT, 0$UINT, 0$UINT, 
TO_UDINT(1396517250), "DI200", //Class
TO_UDINT(3175101883), "SdiasBase", 1$UINT, 51$UINT, //Baseclass
//Servers:
(::DI200.Input1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1344628668), "Input1", 
(::DI200.Input2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3375117830), "Input2", 
(::DI200.Input3.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3190490768), "Input3", 
(::DI200.Input4.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(542085939), "Input4", 
(::DI200.Input5.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1464378277), "Input5", 
(::DI200.Input6.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3460428319), "Input6", 
(::DI200.Input7.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3108422281), "Input7", 
(::DI200.Input8.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(704241432), "Input8", 
(::DI200.Input9.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1593765774), "Input9", 
(::DI200.Input10.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(912000481), "Input10", 
(::DI200.Input11.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1096496503), "Input11", 
(::DI200.Input12.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3629278413), "Input12", 
(::DI200.Input13.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2941604955), "Input13", 
(::DI200.Input14.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(825344504), "Input14", 
(::DI200.Input15.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1178005870), "Input15", 
(::DI200.Input16.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3745489108), "Input16", 
(::DI200.Input17.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2822279234), "Input17", 
(::DI200.Input18.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(948407763), "Input18", 
(::DI200.Input19.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1333837125), "Input19", 
(::DI200.Input20.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(493966882), "Input20", 
(::DI200.InputDouble.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1696744495), "InputDouble", 
//Clients:
END_FUNCTION


#define USER_CNT_DI200 18

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_DI200] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION DI200::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= SdiasBase::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= SdiasBase::ClassState.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, SdiasBase::ClassState.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_DI200;
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #UpdateRt();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #ConnectEvent();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[5]		:= #DisconnectEvent();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[7]		:= #CheckDeviceID();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[15]		:= #GetTaskCfg();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[16]		:= #GetDeviceID();

#pragma warning (default : 74)
	SdiasBase::ClassState.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF SdiasBase::ClassState.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL DI200::UpdateRt
  VAR
    inputMask : DINT;
    newInputs : DINT;
    pInputSrv : ^DINT;
  END_VAR

  newInputs := pReadData^;
  InputMask := InputDouble$DINT xor newInputs; //old Input xor new Input (to see changes)
  
  if InputMask <> 0 then
    
    InputDouble$DINT  := newInputs;
    pInputSrv         :=#Input1.Ddata;

    repeat
      if InputMask and 1 then
        pInputSrv^ := newInputs and 1;
      end_if;
      inputMask := inputMask shr 1;
      newInputs := newInputs shr 1;
      pInputSrv += sizeof(SvrCh);
    until inputMask = 0 end_repeat;

  end_if;  

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI200::CheckDeviceID
	VAR_INPUT
		udID2Check 	: UDINT;
	END_VAR
	VAR_OUTPUT
		bIsOK 	: BOOL;
	END_VAR
  
  //look if it is right hardware
	if ( udID2Check <> DEVICE_ID_DI200 ) then
		bIsOK := FALSE;
	else
    bIsOK := TRUE;
	end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI200::ConnectEvent

  // start the accesses on the SDIAS (initialize the control byte in the DPRAM)
  if DefaultAccesses.ReadAccess.pControlByte then
    pReadData := DefaultAccesses.ReadAccess.pData$^DINT;

    DefaultAccesses.ReadAccess.pControlByte^.EnableDO := TRUE;
  else
    eInitState := _DOHandleInvalid;
    return;
  end_if;

  // module is ok
  eInitState := _ClassOk;
 
END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI200::DisconnectEvent

  // reset general module information shown on servers
  SdiasBase::DisconnectEvent();

END_FUNCTION


FUNCTION VIRTUAL DI200::GetTaskCfg
	VAR_OUTPUT
		TaskCfg 	: BDINT;
	END_VAR

  TaskCfg := SDIAS_TASK_MASK_RT_PRE;

END_FUNCTION


FUNCTION VIRTUAL DI200::GetDeviceID
	VAR_OUTPUT
		output 	: UDINT;
	END_VAR
  
  output := DEVICE_ID_DI200;

END_FUNCTION
